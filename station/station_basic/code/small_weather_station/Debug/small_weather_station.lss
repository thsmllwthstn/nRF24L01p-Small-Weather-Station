
small_weather_station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00001522  000015b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001522  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080010e  0080010e  000015c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004614  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b3  00000000  00000000  00005e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a23  00000000  00000000  00007143  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  00008b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ec0  00000000  00000000  00009234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003146  00000000  00000000  0000a0f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  0000d23a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      2c:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__vector_11>
      30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      68:	b3 07       	cpc	r27, r19
      6a:	b6 07       	cpc	r27, r22
      6c:	b9 07       	cpc	r27, r25
      6e:	bc 07       	cpc	r27, r28
      70:	bf 07       	cpc	r27, r31
      72:	c2 07       	cpc	r28, r18
      74:	c5 07       	cpc	r28, r21

00000076 <__ctors_start>:
      76:	05 05       	cpc	r16, r5

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
      84:	11 e0       	ldi	r17, 0x01	; 1
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e2 e2       	ldi	r30, 0x22	; 34
      8c:	f5 e1       	ldi	r31, 0x15	; 21
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	ae 30       	cpi	r26, 0x0E	; 14
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
      9a:	21 e0       	ldi	r18, 0x01	; 1
      9c:	ae e0       	ldi	r26, 0x0E	; 14
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	af 32       	cpi	r26, 0x2F	; 47
      a6:	b2 07       	cpc	r27, r18
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>

000000aa <__do_global_ctors>:
      aa:	10 e0       	ldi	r17, 0x00	; 0
      ac:	cc e3       	ldi	r28, 0x3C	; 60
      ae:	d0 e0       	ldi	r29, 0x00	; 0
      b0:	04 c0       	rjmp	.+8      	; 0xba <__do_global_ctors+0x10>
      b2:	21 97       	sbiw	r28, 0x01	; 1
      b4:	fe 01       	movw	r30, r28
      b6:	0e 94 45 0a 	call	0x148a	; 0x148a <__tablejump2__>
      ba:	cb 33       	cpi	r28, 0x3B	; 59
      bc:	d1 07       	cpc	r29, r17
      be:	c9 f7       	brne	.-14     	; 0xb2 <__do_global_ctors+0x8>
      c0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <main>
      c4:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <_exit>

000000c8 <__bad_interrupt>:
      c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <_ZN3adcC1Ev>:
#define F_CPU 1000000

#include <util/delay.h>
#include "adc.h"

adc::adc(void)
      cc:	08 95       	ret

000000ce <_ZN3adc7initADCEv>:
}

void adc::initADC(void)
{
	/* Set voltage reference selection to AVcc */
	ADMUX |= 1<<REFS0;
      ce:	ec e7       	ldi	r30, 0x7C	; 124
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	80 64       	ori	r24, 0x40	; 64
      d6:	80 83       	st	Z, r24

	/* Set the pin as Single Ended Input  */
	ADMUX |= ADC_PIN;
      d8:	80 81       	ld	r24, Z
      da:	80 83       	st	Z, r24

	/* Define prescaler:
	 * PRESCALER = CLK_FREQUENCY / INPUT_CLK_FREQUENCY_ADC
	 * 1MHz / (200kHz | 50kHz) = 5 - 20
	 * So we set the prescaler to 8 */
	ADCSRA |= (1<<ADPS0 | 1<<ADPS1);
      dc:	ea e7       	ldi	r30, 0x7A	; 122
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	83 60       	ori	r24, 0x03	; 3
      e4:	80 83       	st	Z, r24

	/* Enable the ADC */
	ADCSRA |= 1<<ADEN;
      e6:	80 81       	ld	r24, Z
      e8:	80 68       	ori	r24, 0x80	; 128
      ea:	80 83       	st	Z, r24
      ec:	08 95       	ret

000000ee <_ZN3adc10analogReadEPh>:
}

uint8_t adc::analogRead(uint8_t *adc_value)
{
	//Start analog to digital conversion
	ADCSRA |= 1<<ADSC;
      ee:	ea e7       	ldi	r30, 0x7A	; 122
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 81       	ld	r24, Z
      f4:	80 64       	ori	r24, 0x40	; 64
      f6:	80 83       	st	Z, r24

	//Set counter prescaler to clk/1
	TCCR0B |= 1<<CS00;
      f8:	85 b5       	in	r24, 0x25	; 37
      fa:	81 60       	ori	r24, 0x01	; 1
      fc:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01 | 1<<CS02);
      fe:	85 b5       	in	r24, 0x25	; 37
     100:	89 7f       	andi	r24, 0xF9	; 249
     102:	85 bd       	out	0x25, r24	; 37

	//Start counting from 0...
	TCNT0 = 0;
     104:	16 bc       	out	0x26, r1	; 38

	//Wait for the conversion to be done (13~25 clock cycles)
	while(ADCSRA & (1<<ADSC))
     106:	80 81       	ld	r24, Z
     108:	86 fd       	sbrc	r24, 6
     10a:	fd cf       	rjmp	.-6      	; 0x106 <_ZN3adc10analogReadEPh+0x18>
	{
		//if(TCNT0 >= 45) return 0;
	}

	//Read the 8-bit registers
	adc_value[0] = ADCL;
     10c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     110:	fb 01       	movw	r30, r22
     112:	80 83       	st	Z, r24
	adc_value[1] = ADCH;
     114:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     118:	81 83       	std	Z+1, r24	; 0x01

	return 1;
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	08 95       	ret

0000011e <_ZN3dhtC1Ev>:

#include <util/delay.h>
#include "dht.h"


dht::dht(void)
     11e:	08 95       	ret

00000120 <_ZN3dht7initDHTEv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     120:	2f e3       	ldi	r18, 0x3F	; 63
     122:	8d e0       	ldi	r24, 0x0D	; 13
     124:	93 e0       	ldi	r25, 0x03	; 3
     126:	21 50       	subi	r18, 0x01	; 1
     128:	80 40       	sbci	r24, 0x00	; 0
     12a:	90 40       	sbci	r25, 0x00	; 0
     12c:	e1 f7       	brne	.-8      	; 0x126 <_ZN3dht7initDHTEv+0x6>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <_ZN3dht7initDHTEv+0x10>
     130:	00 00       	nop
     132:	08 95       	ret

00000134 <_ZN3dht7requestEv>:
}

void dht::request(void)
{
	//Set the DHT11_PIN as output
	DDRD |= 1<<dht_pin;
     134:	52 9a       	sbi	0x0a, 2	; 10

	//Set the output low
	PORTD &= ~(1<<dht_pin);
     136:	5a 98       	cbi	0x0b, 2	; 11
     138:	87 e8       	ldi	r24, 0x87	; 135
     13a:	93 e1       	ldi	r25, 0x13	; 19
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <_ZN3dht7requestEv+0x8>
     140:	00 c0       	rjmp	.+0      	; 0x142 <_ZN3dht7requestEv+0xe>
     142:	00 00       	nop

	//Set pin high after 20ms
	_delay_ms(20);
	PORTD |= (1<<dht_pin);
     144:	5a 9a       	sbi	0x0b, 2	; 11
     146:	08 95       	ret

00000148 <_ZN3dht8responseEv>:
}

uint8_t dht::response(void)
{
	//Set the DHT11_pin as input
	DDRD &= ~(1<<dht_pin);
     148:	52 98       	cbi	0x0a, 2	; 10

	//Set counter prescaler to clk/1
	TCCR0B |= 1<<CS00;
     14a:	85 b5       	in	r24, 0x25	; 37
     14c:	81 60       	ori	r24, 0x01	; 1
     14e:	85 bd       	out	0x25, r24	; 37

	//Start counting from 0...
	TCNT0 = 0;
     150:	16 bc       	out	0x26, r1	; 38

	//Wait for the sensor to drive the line low (20us - 40us)
	while(PIND & (1<<dht_pin))
     152:	03 c0       	rjmp	.+6      	; 0x15a <_ZN3dht8responseEv+0x12>
	{
		if(TCNT0 >= 60) return 0;
     154:	86 b5       	in	r24, 0x26	; 38
     156:	8c 33       	cpi	r24, 0x3C	; 60
     158:	c0 f4       	brcc	.+48     	; 0x18a <_ZN3dht8responseEv+0x42>

	//Start counting from 0...
	TCNT0 = 0;

	//Wait for the sensor to drive the line low (20us - 40us)
	while(PIND & (1<<dht_pin))
     15a:	89 b1       	in	r24, 0x09	; 9
     15c:	28 2f       	mov	r18, r24
     15e:	24 70       	andi	r18, 0x04	; 4
     160:	82 fd       	sbrc	r24, 2
     162:	f8 cf       	rjmp	.-16     	; 0x154 <_ZN3dht8responseEv+0xc>
	{
		if(TCNT0 >= 60) return 0;
	}

	//Wait for the sensor to drive the line high (~80us)
	TCNT0 = 0;
     164:	16 bc       	out	0x26, r1	; 38
	while(!(PIND & (1<<dht_pin)))
     166:	03 c0       	rjmp	.+6      	; 0x16e <_ZN3dht8responseEv+0x26>
	{
		if(TCNT0 >= 100) return 0;
     168:	96 b5       	in	r25, 0x26	; 38
     16a:	94 36       	cpi	r25, 0x64	; 100
     16c:	88 f4       	brcc	.+34     	; 0x190 <_ZN3dht8responseEv+0x48>
		if(TCNT0 >= 60) return 0;
	}

	//Wait for the sensor to drive the line high (~80us)
	TCNT0 = 0;
	while(!(PIND & (1<<dht_pin)))
     16e:	99 b1       	in	r25, 0x09	; 9
     170:	89 2f       	mov	r24, r25
     172:	84 70       	andi	r24, 0x04	; 4
     174:	92 ff       	sbrs	r25, 2
     176:	f8 cf       	rjmp	.-16     	; 0x168 <_ZN3dht8responseEv+0x20>
	{
		if(TCNT0 >= 100) return 0;
	}

	//Wait for the sensor to drive the line low again (~80us)
	TCNT0 = 0;
     178:	16 bc       	out	0x26, r1	; 38
	while(PIND & (1<<dht_pin))
     17a:	03 c0       	rjmp	.+6      	; 0x182 <_ZN3dht8responseEv+0x3a>
	{
		if(TCNT0 >= 100) return 0;
     17c:	86 b5       	in	r24, 0x26	; 38
     17e:	84 36       	cpi	r24, 0x64	; 100
     180:	30 f4       	brcc	.+12     	; 0x18e <_ZN3dht8responseEv+0x46>
		if(TCNT0 >= 100) return 0;
	}

	//Wait for the sensor to drive the line low again (~80us)
	TCNT0 = 0;
	while(PIND & (1<<dht_pin))
     182:	4a 99       	sbic	0x09, 2	; 9
     184:	fb cf       	rjmp	.-10     	; 0x17c <_ZN3dht8responseEv+0x34>
	{
		if(TCNT0 >= 100) return 0;
	}

	return 1;
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	08 95       	ret
	TCNT0 = 0;

	//Wait for the sensor to drive the line low (20us - 40us)
	while(PIND & (1<<dht_pin))
	{
		if(TCNT0 >= 60) return 0;
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	08 95       	ret

	//Wait for the sensor to drive the line low again (~80us)
	TCNT0 = 0;
	while(PIND & (1<<dht_pin))
	{
		if(TCNT0 >= 100) return 0;
     18e:	82 2f       	mov	r24, r18
	}

	return 1;
}
     190:	08 95       	ret

00000192 <_ZN3dht10read_bytesEv>:

int dht::read_bytes(void) 
{
     192:	28 e0       	ldi	r18, 0x08	; 8
     194:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t data = 0x00;
     196:	90 e0       	ldi	r25, 0x00	; 0

	for (int i = 0; i < 8; i++)
	{
		//Data transmission always starts with a low pulse (~50us)
		TCNT0 = 0;
     198:	16 bc       	out	0x26, r1	; 38
		while(!(PIND & (1<<dht_pin)))
     19a:	03 c0       	rjmp	.+6      	; 0x1a2 <_ZN3dht10read_bytesEv+0x10>
		{
			if(TCNT0 >= 70) return -1;
     19c:	86 b5       	in	r24, 0x26	; 38
     19e:	86 34       	cpi	r24, 0x46	; 70
     1a0:	d0 f4       	brcc	.+52     	; 0x1d6 <_ZN3dht10read_bytesEv+0x44>

	for (int i = 0; i < 8; i++)
	{
		//Data transmission always starts with a low pulse (~50us)
		TCNT0 = 0;
		while(!(PIND & (1<<dht_pin)))
     1a2:	4a 9b       	sbis	0x09, 2	; 9
     1a4:	fb cf       	rjmp	.-10     	; 0x19c <_ZN3dht10read_bytesEv+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a6:	8f e0       	ldi	r24, 0x0F	; 15
     1a8:	8a 95       	dec	r24
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <_ZN3dht10read_bytesEv+0x16>

		/* After 45us, if the pulse is high, the bit is a '1', 
		 * otherwise the bit is a '0' */
		 _delay_us(45);

		(PIND & (1<<dht_pin)) ? data = (data << 1) | (0x01) : data = (data << 1);
     1ac:	4a 9b       	sbis	0x09, 2	; 9
     1ae:	05 c0       	rjmp	.+10     	; 0x1ba <_ZN3dht10read_bytesEv+0x28>
     1b0:	89 2f       	mov	r24, r25
     1b2:	88 0f       	add	r24, r24
     1b4:	98 2f       	mov	r25, r24
     1b6:	91 60       	ori	r25, 0x01	; 1
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <_ZN3dht10read_bytesEv+0x2a>
     1ba:	99 0f       	add	r25, r25

		//If the pulse is a '1', wait for the next low pulse to begin (~25us)
		TCNT0 = 0;
     1bc:	16 bc       	out	0x26, r1	; 38
		while(PIND & (1<<dht_pin))
     1be:	03 c0       	rjmp	.+6      	; 0x1c6 <_ZN3dht10read_bytesEv+0x34>
		{
			if(TCNT0 >= 45) return -1;
     1c0:	86 b5       	in	r24, 0x26	; 38
     1c2:	8d 32       	cpi	r24, 0x2D	; 45
     1c4:	58 f4       	brcc	.+22     	; 0x1dc <_ZN3dht10read_bytesEv+0x4a>

		(PIND & (1<<dht_pin)) ? data = (data << 1) | (0x01) : data = (data << 1);

		//If the pulse is a '1', wait for the next low pulse to begin (~25us)
		TCNT0 = 0;
		while(PIND & (1<<dht_pin))
     1c6:	4a 99       	sbic	0x09, 2	; 9
     1c8:	fb cf       	rjmp	.-10     	; 0x1c0 <_ZN3dht10read_bytesEv+0x2e>
     1ca:	21 50       	subi	r18, 0x01	; 1
     1cc:	31 09       	sbc	r19, r1

int dht::read_bytes(void) 
{
	uint8_t data = 0x00;

	for (int i = 0; i < 8; i++)
     1ce:	21 f7       	brne	.-56     	; 0x198 <_ZN3dht10read_bytesEv+0x6>
		while(PIND & (1<<dht_pin))
		{
			if(TCNT0 >= 45) return -1;
		}
	}
	return data;
     1d0:	89 2f       	mov	r24, r25
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	08 95       	ret
	{
		//Data transmission always starts with a low pulse (~50us)
		TCNT0 = 0;
		while(!(PIND & (1<<dht_pin)))
		{
			if(TCNT0 >= 70) return -1;
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	9f ef       	ldi	r25, 0xFF	; 255
     1da:	08 95       	ret

		//If the pulse is a '1', wait for the next low pulse to begin (~25us)
		TCNT0 = 0;
		while(PIND & (1<<dht_pin))
		{
			if(TCNT0 >= 45) return -1;
     1dc:	8f ef       	ldi	r24, 0xFF	; 255
     1de:	9f ef       	ldi	r25, 0xFF	; 255
		}
	}
	return data;
     1e0:	08 95       	ret

000001e2 <_Z14getTemperaturePhh>:
#include <avr/io.h>
#include "ds18b20.h"

uint8_t getTemperature(uint8_t *temp, uint8_t pin)
{
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	8c 01       	movw	r16, r24
     1ea:	c6 2f       	mov	r28, r22
	//Start the conversation with a reset puls
	if(!onewire_reset(pin) )
     1ec:	86 2f       	mov	r24, r22
     1ee:	0e 94 6d 09 	call	0x12da	; 0x12da <_Z13onewire_reseth>
     1f2:	88 23       	and	r24, r24
     1f4:	31 f1       	breq	.+76     	; 0x242 <_Z14getTemperaturePhh+0x60>
	{
		return 0;
	}

	//Skip the ROM-command
	onewire_write(SKIP_ROM, pin);
     1f6:	6c 2f       	mov	r22, r28
     1f8:	8c ec       	ldi	r24, 0xCC	; 204
     1fa:	0e 94 a4 09 	call	0x1348	; 0x1348 <_Z13onewire_writehh>
	
	//Start analog to digital conversion
	onewire_write(START_CONVERSION, pin);
     1fe:	6c 2f       	mov	r22, r28
     200:	84 e4       	ldi	r24, 0x44	; 68
     202:	0e 94 a4 09 	call	0x1348	; 0x1348 <_Z13onewire_writehh>
	*  ---------------------------------  *
	*    9-bit conversion  -   93.75ms    *
	*    10-bit conversion -   187.5ms    *
	*    11-bit conversion -   375.0ms    *
	*    12-bit conversion -   750.0ms    */
	while(!(onewire_wait_for_conversion(pin) ) )
     206:	8c 2f       	mov	r24, r28
     208:	0e 94 12 0a 	call	0x1424	; 0x1424 <_Z27onewire_wait_for_conversionh>
     20c:	88 23       	and	r24, r24
     20e:	d9 f3       	breq	.-10     	; 0x206 <_Z14getTemperaturePhh+0x24>
	{
		//Wait for conversion
	}

	//Start conversation again with reset puls
	onewire_reset(pin);
     210:	8c 2f       	mov	r24, r28
     212:	0e 94 6d 09 	call	0x12da	; 0x12da <_Z13onewire_reseth>
		
	//Skip the ROM-command
	onewire_write(SKIP_ROM, pin);
     216:	6c 2f       	mov	r22, r28
     218:	8c ec       	ldi	r24, 0xCC	; 204
     21a:	0e 94 a4 09 	call	0x1348	; 0x1348 <_Z13onewire_writehh>

	//Start reading the entire scratchpath which contains of 9 bytes
	onewire_write(READ_SCRATCHPAD, pin);
     21e:	6c 2f       	mov	r22, r28
     220:	8e eb       	ldi	r24, 0xBE	; 190
     222:	0e 94 a4 09 	call	0x1348	; 0x1348 <_Z13onewire_writehh>

	//Read the first 2 bytes and store them in data
	for(uint8_t i = 0; i < 2; i++)
	{
		temp[i] = onewire_read(pin);
     226:	8c 2f       	mov	r24, r28
     228:	0e 94 de 09 	call	0x13bc	; 0x13bc <_Z12onewire_readh>
     22c:	f8 01       	movw	r30, r16
     22e:	80 83       	st	Z, r24
     230:	8c 2f       	mov	r24, r28
     232:	0e 94 de 09 	call	0x13bc	; 0x13bc <_Z12onewire_readh>
     236:	f8 01       	movw	r30, r16
     238:	81 83       	std	Z+1, r24	; 0x01
	}

	//Reset the DS18B20 since it sends 9 bytes of data,
	//and we only need the first 2 bytes
	onewire_reset(pin);
     23a:	8c 2f       	mov	r24, r28
     23c:	0e 94 6d 09 	call	0x12da	; 0x12da <_Z13onewire_reseth>

	return 1;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	cf 91       	pop	r28
     244:	1f 91       	pop	r17
     246:	0f 91       	pop	r16
     248:	08 95       	ret

0000024a <_Z12send_tx_datav>:
		}
    }		
}

void send_tx_data(void)
{
     24a:	af 92       	push	r10
     24c:	bf 92       	push	r11
     24e:	df 92       	push	r13
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
     260:	2a 97       	sbiw	r28, 0x0a	; 10
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	de bf       	out	0x3e, r29	; 62
     268:	0f be       	out	0x3f, r0	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
	uint8_t data_counter = 0, new_data_counter = 0;

	/**************************** Temperature Sensor ****************************/
	//Read the temperature and store the bytes
	uint8_t temperature_data[2];
	if(getTemperature(temperature_data, TEMPERATURE_PIN) )
     26c:	64 e0       	ldi	r22, 0x04	; 4
     26e:	ce 01       	movw	r24, r28
     270:	09 96       	adiw	r24, 0x09	; 9
     272:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14getTemperaturePhh>
     276:	88 23       	and	r24, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_Z12send_tx_datav+0x32>
     27a:	6c c0       	rjmp	.+216    	; 0x354 <_Z12send_tx_datav+0x10a>
	{
		//Add the bytes to the array we're going to send
		for(uint8_t i = 0; i < sizeof(temperature_data); i++)
		{
			TX_DATA[i + data_counter] = temperature_data[i];
     27c:	ef e1       	ldi	r30, 0x1F	; 31
     27e:	f1 e0       	ldi	r31, 0x01	; 1
     280:	89 85       	ldd	r24, Y+9	; 0x09
     282:	80 83       	st	Z, r24
     284:	8a 85       	ldd	r24, Y+10	; 0x0a
     286:	81 83       	std	Z+1, r24	; 0x01
			new_data_counter++;
     288:	68 94       	set
     28a:	dd 24       	eor	r13, r13
     28c:	d1 f8       	bld	r13, 1
     28e:	63 c0       	rjmp	.+198    	; 0x356 <_Z12send_tx_datav+0x10c>
	
	if(my_humidity.response() )
	{	
		for(int i = 0; i < 4; i++)
		{
			uint8_t dht_byte = my_humidity.read_bytes();
     290:	8a e2       	ldi	r24, 0x2A	; 42
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN3dht10read_bytesEv>
     298:	d8 01       	movw	r26, r16
     29a:	8d 93       	st	X+, r24
     29c:	8d 01       	movw	r16, r26
		
	my_humidity.request();
	
	if(my_humidity.response() )
	{	
		for(int i = 0; i < 4; i++)
     29e:	aa 15       	cp	r26, r10
     2a0:	bb 05       	cpc	r27, r11
     2a2:	b1 f7       	brne	.-20     	; 0x290 <_Z12send_tx_datav+0x46>
			{
				DHT_data[i] = dht_byte;
			}
		}

		uint8_t DHT_checksum  = my_humidity.read_bytes();
     2a4:	8a e2       	ldi	r24, 0x2A	; 42
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN3dht10read_bytesEv>
	
		if ((DHT_data[0] + DHT_data[1] + DHT_data[2] + DHT_data[3]) == DHT_checksum)
     2ac:	49 81       	ldd	r20, Y+1	; 0x01
     2ae:	2a 81       	ldd	r18, Y+2	; 0x02
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	24 0f       	add	r18, r20
     2b4:	31 1d       	adc	r19, r1
     2b6:	4b 81       	ldd	r20, Y+3	; 0x03
     2b8:	24 0f       	add	r18, r20
     2ba:	31 1d       	adc	r19, r1
     2bc:	4c 81       	ldd	r20, Y+4	; 0x04
     2be:	24 0f       	add	r18, r20
     2c0:	31 1d       	adc	r19, r1
     2c2:	99 27       	eor	r25, r25
     2c4:	28 17       	cp	r18, r24
     2c6:	39 07       	cpc	r19, r25
     2c8:	09 f0       	breq	.+2      	; 0x2cc <_Z12send_tx_datav+0x82>
     2ca:	58 c0       	rjmp	.+176    	; 0x37c <_Z12send_tx_datav+0x132>
     2cc:	8d 2d       	mov	r24, r13
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	fc 01       	movw	r30, r24
     2d2:	e1 5e       	subi	r30, 0xE1	; 225
     2d4:	fe 4f       	sbci	r31, 0xFE	; 254
     2d6:	8d 5d       	subi	r24, 0xDD	; 221
     2d8:	9e 4f       	sbci	r25, 0xFE	; 254
		{
			//Add the bytes to the array we're going to send
			for(uint8_t i = 0; i < sizeof(DHT_data); i++)
			{
				TX_DATA[i + data_counter] = DHT_data[i];
     2da:	d7 01       	movw	r26, r14
     2dc:	2d 91       	ld	r18, X+
     2de:	7d 01       	movw	r14, r26
     2e0:	21 93       	st	Z+, r18
		uint8_t DHT_checksum  = my_humidity.read_bytes();
	
		if ((DHT_data[0] + DHT_data[1] + DHT_data[2] + DHT_data[3]) == DHT_checksum)
		{
			//Add the bytes to the array we're going to send
			for(uint8_t i = 0; i < sizeof(DHT_data); i++)
     2e2:	e8 17       	cp	r30, r24
     2e4:	f9 07       	cpc	r31, r25
     2e6:	c9 f7       	brne	.-14     	; 0x2da <_Z12send_tx_datav+0x90>
     2e8:	b4 e0       	ldi	r27, 0x04	; 4
     2ea:	db 0e       	add	r13, r27
     2ec:	47 c0       	rjmp	.+142    	; 0x37c <_Z12send_tx_datav+0x132>

	/******************************* Analog Value *******************************/
	//Read the analog value and store the bytes
	uint8_t analogValue[2];

	if(my_adc.analogRead(analogValue) )
     2ee:	be 01       	movw	r22, r28
     2f0:	69 5f       	subi	r22, 0xF9	; 249
     2f2:	7f 4f       	sbci	r23, 0xFF	; 255
     2f4:	8b e2       	ldi	r24, 0x2B	; 43
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	0e 94 77 00 	call	0xee	; 0xee <_ZN3adc10analogReadEPh>
     2fc:	88 23       	and	r24, r24
     2fe:	51 f0       	breq	.+20     	; 0x314 <_Z12send_tx_datav+0xca>
	{
		//Add the bytes to the array we're going to send
		for(int i = 0; i < 2; i++)
		{
			TX_DATA[i + data_counter] = analogValue[i];
     300:	ed 2d       	mov	r30, r13
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	e1 5e       	subi	r30, 0xE1	; 225
     306:	fe 4f       	sbci	r31, 0xFE	; 254
     308:	8f 81       	ldd	r24, Y+7	; 0x07
     30a:	80 83       	st	Z, r24
     30c:	88 85       	ldd	r24, Y+8	; 0x08
     30e:	81 83       	std	Z+1, r24	; 0x01
     310:	d3 94       	inc	r13
     312:	d3 94       	inc	r13
		}
	}
	data_counter = new_data_counter;

	/********************** External Temperature Sensor *************************/
	if(TRANSFER_SIZE == 10)
     314:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <TRANSFER_SIZE>
     318:	8a 30       	cpi	r24, 0x0A	; 10
     31a:	79 f4       	brne	.+30     	; 0x33a <_Z12send_tx_datav+0xf0>
	{
		//Read the temperature and store the bytes
		uint8_t ext_temperature_data[2];
		if(getTemperature(ext_temperature_data, EXT_TEMPERATURE_PIN) )
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	ce 01       	movw	r24, r28
     320:	05 96       	adiw	r24, 0x05	; 5
     322:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14getTemperaturePhh>
     326:	88 23       	and	r24, r24
     328:	41 f0       	breq	.+16     	; 0x33a <_Z12send_tx_datav+0xf0>
		{
			//Add the bytes to the array we're going to send
			for(uint8_t i = 0; i < sizeof(ext_temperature_data); i++)
			{
				TX_DATA[i + data_counter] = ext_temperature_data[i];
     32a:	ed 2d       	mov	r30, r13
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	e1 5e       	subi	r30, 0xE1	; 225
     330:	fe 4f       	sbci	r31, 0xFE	; 254
     332:	8d 81       	ldd	r24, Y+5	; 0x05
     334:	80 83       	st	Z, r24
     336:	8e 81       	ldd	r24, Y+6	; 0x06
     338:	81 83       	std	Z+1, r24	; 0x01
		}
		data_counter = new_data_counter;
	}
	
	//Send to array to the nRF24L01+
	my_nrf.writeData(TX_DATA, TRANSFER_SIZE);
     33a:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <TRANSFER_SIZE>
     33e:	6f e1       	ldi	r22, 0x1F	; 31
     340:	71 e0       	ldi	r23, 0x01	; 1
     342:	8c e2       	ldi	r24, 0x2C	; 44
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZN9nRF24L01P9writeDataEPhh>

	//Put the nRF24L01+ in sleep mode
	my_nrf.powerDown();
     34a:	8c e2       	ldi	r24, 0x2C	; 44
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN9nRF24L01P9powerDownEv>
     352:	1e c0       	rjmp	.+60     	; 0x390 <_Z12send_tx_datav+0x146>
}

void send_tx_data(void)
{
	//Variables
	uint8_t data_counter = 0, new_data_counter = 0;
     354:	d1 2c       	mov	r13, r1

	/***************************** Humidity Sensor ******************************/	
	//Read the DHT11 data and store the bytes
	uint8_t DHT_data[4];
		
	my_humidity.request();
     356:	8a e2       	ldi	r24, 0x2A	; 42
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	0e 94 9a 00 	call	0x134	; 0x134 <_ZN3dht7requestEv>
	
	if(my_humidity.response() )
     35e:	8a e2       	ldi	r24, 0x2A	; 42
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	0e 94 a4 00 	call	0x148	; 0x148 <_ZN3dht8responseEv>
     366:	88 23       	and	r24, r24
     368:	11 f2       	breq	.-124    	; 0x2ee <_Z12send_tx_datav+0xa4>
     36a:	fe 01       	movw	r30, r28
     36c:	31 96       	adiw	r30, 0x01	; 1
     36e:	7f 01       	movw	r14, r30
     370:	5e 01       	movw	r10, r28
     372:	f5 e0       	ldi	r31, 0x05	; 5
     374:	af 0e       	add	r10, r31
     376:	b1 1c       	adc	r11, r1
     378:	87 01       	movw	r16, r14
     37a:	8a cf       	rjmp	.-236    	; 0x290 <_Z12send_tx_datav+0x46>

	/******************************* Analog Value *******************************/
	//Read the analog value and store the bytes
	uint8_t analogValue[2];

	if(my_adc.analogRead(analogValue) )
     37c:	be 01       	movw	r22, r28
     37e:	69 5f       	subi	r22, 0xF9	; 249
     380:	7f 4f       	sbci	r23, 0xFF	; 255
     382:	8b e2       	ldi	r24, 0x2B	; 43
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 77 00 	call	0xee	; 0xee <_ZN3adc10analogReadEPh>
     38a:	81 11       	cpse	r24, r1
     38c:	b9 cf       	rjmp	.-142    	; 0x300 <_Z12send_tx_datav+0xb6>
     38e:	c2 cf       	rjmp	.-124    	; 0x314 <_Z12send_tx_datav+0xca>
	//Send to array to the nRF24L01+
	my_nrf.writeData(TX_DATA, TRANSFER_SIZE);

	//Put the nRF24L01+ in sleep mode
	my_nrf.powerDown();
}
     390:	2a 96       	adiw	r28, 0x0a	; 10
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	ff 90       	pop	r15
     3a6:	ef 90       	pop	r14
     3a8:	df 90       	pop	r13
     3aa:	bf 90       	pop	r11
     3ac:	af 90       	pop	r10
     3ae:	08 95       	ret

000003b0 <main>:
bool rx_error = false;
bool send_response = false;
int mode = TX_MODE;

int main(void)
{
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	2c 97       	sbiw	r28, 0x0c	; 12
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	f8 94       	cli
     3be:	de bf       	out	0x3e, r29	; 62
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	cd bf       	out	0x3d, r28	; 61
	/******* Check if the external temperature sensor is connected or not *******/
	uint8_t dummy_array[2];
	(getTemperature(dummy_array, EXT_TEMPERATURE_PIN) ) ? TRANSFER_SIZE = 10 : TRANSFER_SIZE = 8;	
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	ce 01       	movw	r24, r28
     3c8:	0b 96       	adiw	r24, 0x0b	; 11
     3ca:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14getTemperaturePhh>
     3ce:	88 23       	and	r24, r24
     3d0:	21 f0       	breq	.+8      	; 0x3da <main+0x2a>
     3d2:	8a e0       	ldi	r24, 0x0A	; 10
     3d4:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <TRANSFER_SIZE>
     3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <main+0x30>
     3da:	88 e0       	ldi	r24, 0x08	; 8
     3dc:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <TRANSFER_SIZE>
	
	my_humidity.initDHT();
     3e0:	8a e2       	ldi	r24, 0x2A	; 42
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	0e 94 90 00 	call	0x120	; 0x120 <_ZN3dht7initDHTEv>
	my_adc.initADC();
     3e8:	8b e2       	ldi	r24, 0x2B	; 43
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	0e 94 67 00 	call	0xce	; 0xce <_ZN3adc7initADCEv>
	
	/******* nRF24L01+ Settings *******/
	my_nrf.setOutputPower(OUTPUT_POWER_MINUS_18DBM);
     3f0:	6e ee       	ldi	r22, 0xEE	; 238
     3f2:	8c e2       	ldi	r24, 0x2C	; 44
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	0e 94 32 08 	call	0x1064	; 0x1064 <_ZN9nRF24L01P14setOutputPowerEa>
	my_nrf.setAirDataRate(AIR_DATA_RATE_250KBPS);
     3fa:	6a ef       	ldi	r22, 0xFA	; 250
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	8c e2       	ldi	r24, 0x2C	; 44
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	0e 94 08 08 	call	0x1010	; 0x1010 <_ZN9nRF24L01P14setAirDataRateEj>
	my_nrf.setCyclicRedundancyCheck(CYCLIC_REDUNDANCY_CHECK_1BYTE);
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	8c e2       	ldi	r24, 0x2C	; 44
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN9nRF24L01P24setCyclicRedundancyCheckEh>
	my_nrf.disableAutoAcknowledgment();
     410:	8c e2       	ldi	r24, 0x2C	; 44
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0e 94 75 07 	call	0xeea	; 0xeea <_ZN9nRF24L01P25disableAutoAcknowledgmentEv>
	my_nrf.disableAutoRetransmit();
     418:	8c e2       	ldi	r24, 0x2C	; 44
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	0e 94 83 07 	call	0xf06	; 0xf06 <_ZN9nRF24L01P21disableAutoRetransmitEv>
	my_nrf.enableDataPipe(DATA_PIPE_ALL);
     420:	6f ef       	ldi	r22, 0xFF	; 255
     422:	8c e2       	ldi	r24, 0x2C	; 44
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZN9nRF24L01P14enableDataPipeEa>
	my_nrf.setTransferSize(DATA_PIPE_0, TRANSFER_SIZE);
     42a:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <TRANSFER_SIZE>
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	8c e2       	ldi	r24, 0x2C	; 44
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN9nRF24L01P15setTransferSizeEhh>
	my_nrf.setTransferSize(DATA_PIPE_1, TRANSFER_SIZE);
     438:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <TRANSFER_SIZE>
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	8c e2       	ldi	r24, 0x2C	; 44
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN9nRF24L01P15setTransferSizeEhh>
	my_nrf.setTransferSize(DATA_PIPE_2, TRANSFER_SIZE);
     446:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <TRANSFER_SIZE>
     44a:	62 e0       	ldi	r22, 0x02	; 2
     44c:	8c e2       	ldi	r24, 0x2C	; 44
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN9nRF24L01P15setTransferSizeEhh>
	my_nrf.setTransferSize(DATA_PIPE_3, TRANSFER_SIZE);
     454:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <TRANSFER_SIZE>
     458:	63 e0       	ldi	r22, 0x03	; 3
     45a:	8c e2       	ldi	r24, 0x2C	; 44
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN9nRF24L01P15setTransferSizeEhh>
	my_nrf.setTransferSize(DATA_PIPE_4, TRANSFER_SIZE);
     462:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <TRANSFER_SIZE>
     466:	64 e0       	ldi	r22, 0x04	; 4
     468:	8c e2       	ldi	r24, 0x2C	; 44
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN9nRF24L01P15setTransferSizeEhh>
	my_nrf.setTransferSize(DATA_PIPE_5, TRANSFER_SIZE);
     470:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <TRANSFER_SIZE>
     474:	65 e0       	ldi	r22, 0x05	; 5
     476:	8c e2       	ldi	r24, 0x2C	; 44
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN9nRF24L01P15setTransferSizeEhh>

	my_nrf.setReceiveMode();
     47e:	8c e2       	ldi	r24, 0x2C	; 44
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN9nRF24L01P14setReceiveModeEv>

	/* Enable Clear Timer on Compare mode */
	TCCR1B |= (1 << WGM12);
     486:	e1 e8       	ldi	r30, 0x81	; 129
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	88 60       	ori	r24, 0x08	; 8
     48e:	80 83       	st	Z, r24

	/* Enable timer interrupt */
	TIMSK1 |= (1 << OCIE1A);
     490:	af e6       	ldi	r26, 0x6F	; 111
     492:	b0 e0       	ldi	r27, 0x00	; 0
     494:	8c 91       	ld	r24, X
     496:	82 60       	ori	r24, 0x02	; 2
     498:	8c 93       	st	X, r24

	/* One Second Calculation
	 * time[s] = frequency / (prescaler * compare) 
	 * 1000000 / (64 * (15625 - 1)) = 1[s]   */
	TCCR1B |= (1 << CS11) | (1 << CS10);
     49a:	80 81       	ld	r24, Z
     49c:	83 60       	ori	r24, 0x03	; 3
     49e:	80 83       	st	Z, r24
	OCR1A = 0x3D08;
     4a0:	88 e0       	ldi	r24, 0x08	; 8
     4a2:	9d e3       	ldi	r25, 0x3D	; 61
     4a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	/* Enable interrupts */
	sei();
     4ac:	78 94       	sei

	//Set the LED as output
	DDRD |= 1<<LED;
     4ae:	53 9a       	sbi	0x0a, 3	; 10

	//Set the button as input
	DDRD &= ~(1<<BUTTON);	
     4b0:	55 98       	cbi	0x0a, 5	; 10
     4b2:	84 e0       	ldi	r24, 0x04	; 4
     4b4:	90 e0       	ldi	r25, 0x00	; 0

	//Toggle the led to let the user know the PCB is ready to use...
	for(int i = 0; i < 4; i++)
	{
		PORTD ^= 1<<LED;
     4b6:	38 e0       	ldi	r19, 0x08	; 8
     4b8:	2b b1       	in	r18, 0x0b	; 11
     4ba:	23 27       	eor	r18, r19
     4bc:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4be:	e3 e2       	ldi	r30, 0x23	; 35
     4c0:	f4 ef       	ldi	r31, 0xF4	; 244
     4c2:	31 97       	sbiw	r30, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c8:	00 00       	nop
     4ca:	01 97       	sbiw	r24, 0x01	; 1

	//Set the button as input
	DDRD &= ~(1<<BUTTON);	

	//Toggle the led to let the user know the PCB is ready to use...
	for(int i = 0; i < 4; i++)
     4cc:	a9 f7       	brne	.-22     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
	{
		PORTD ^= 1<<LED;
		_delay_ms(250);
	}

	send_tx_data();
     4ce:	0e 94 25 01 	call	0x24a	; 0x24a <_Z12send_tx_datav>
				my_nrf.setTXAddress(0xE7E7E7E7E7);
				send_tx_timer = 5;

				for(int i = 0; i < 8; i++)
				{
					PORTD ^= 1<<LED;
     4d2:	68 94       	set
     4d4:	bb 24       	eor	r11, r11
     4d6:	b3 f8       	bld	r11, 3

	send_tx_data();

    while(1)
    {
		one_second_counter_ptr = &one_second_counter;
     4d8:	0f 2e       	mov	r0, r31
     4da:	f3 e1       	ldi	r31, 0x13	; 19
     4dc:	cf 2e       	mov	r12, r31
     4de:	f1 e0       	ldi	r31, 0x01	; 1
     4e0:	df 2e       	mov	r13, r31
     4e2:	f0 2d       	mov	r31, r0
				my_nrf.setRXAddress(DATA_PIPE_2, 0xC3);
				my_nrf.setRXAddress(DATA_PIPE_3, 0xC4);
				my_nrf.setRXAddress(DATA_PIPE_4, 0xC5);
				my_nrf.setRXAddress(DATA_PIPE_5, 0xC6);
				my_nrf.setTXAddress(0xE7E7E7E7E7);
				send_tx_timer = 5;
     4e4:	0f 2e       	mov	r0, r31
     4e6:	f5 e0       	ldi	r31, 0x05	; 5
     4e8:	6f 2e       	mov	r6, r31
     4ea:	71 2c       	mov	r7, r1
     4ec:	f0 2d       	mov	r31, r0
     4ee:	68 94       	set
     4f0:	55 24       	eor	r5, r5
     4f2:	53 f8       	bld	r5, 3
     4f4:	a1 2c       	mov	r10, r1
		}
		else if(!(PIND & 1<<BUTTON) && debounce && mode == RX_MODE)
		{
			my_nrf.setTransmitMode();
			PORTD &= ~(1<<LED);
			mode = TX_MODE;
     4f6:	88 24       	eor	r8, r8
     4f8:	83 94       	inc	r8
     4fa:	91 2c       	mov	r9, r1
     4fc:	1e 01       	movw	r2, r28
     4fe:	f5 e0       	ldi	r31, 0x05	; 5
     500:	2f 0e       	add	r2, r31
     502:	31 1c       	adc	r3, r1

	send_tx_data();

    while(1)
    {
		one_second_counter_ptr = &one_second_counter;
     504:	d0 92 12 01 	sts	0x0112, r13	; 0x800112 <one_second_counter_ptr+0x1>
     508:	c0 92 11 01 	sts	0x0111, r12	; 0x800111 <one_second_counter_ptr>
		if(*one_second_counter_ptr >= send_tx_timer && mode == TX_MODE)
     50c:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <one_second_counter>
     510:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <one_second_counter+0x1>
     514:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <send_tx_timer>
     518:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <send_tx_timer+0x1>
     51c:	28 17       	cp	r18, r24
     51e:	39 07       	cpc	r19, r25
     520:	60 f0       	brcs	.+24     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     522:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     526:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	31 f4       	brne	.+12     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
		{
			send_tx_data();
     52e:	0e 94 25 01 	call	0x24a	; 0x24a <_Z12send_tx_datav>
			one_second_counter = 0;
     532:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <one_second_counter+0x1>
     536:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <one_second_counter>
		}

		/* If button is pressed, toggle between RX en TX mode */
		if((PIND & 1<<BUTTON) && !debounce)
     53a:	4d 9b       	sbis	0x09, 5	; 9
     53c:	f8 c1       	rjmp	.+1008   	; 0x92e <__stack+0x2f>
     53e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <debounce>
     542:	81 11       	cpse	r24, r1
     544:	3e c2       	rjmp	.+1148   	; 0x9c2 <__stack+0xc3>
     546:	e5 c1       	rjmp	.+970    	; 0x912 <__stack+0x13>
		{
			debounce = true;
			one_second_counter = 0;
			_delay_ms(5);
		}
		else if(!(PIND & 1<<BUTTON) && debounce && mode == TX_MODE)
     548:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <debounce>
     54c:	88 23       	and	r24, r24
     54e:	09 f4       	brne	.+2      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     550:	3e c2       	rjmp	.+1148   	; 0x9ce <__stack+0xcf>
     552:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     556:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	09 f0       	breq	.+2      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
     55e:	34 c2       	rjmp	.+1128   	; 0x9c8 <__stack+0xc9>
     560:	e9 c1       	rjmp	.+978    	; 0x934 <__stack+0x35>
			PORTD |= 1<<LED;
			mode = RX_MODE;
			debounce = false;
			_delay_ms(5);
		}
		else if(!(PIND & 1<<BUTTON) && debounce && mode == RX_MODE)
     562:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <debounce>
     566:	88 23       	and	r24, r24
     568:	09 f4       	brne	.+2      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
     56a:	33 c2       	rjmp	.+1126   	; 0x9d2 <__stack+0xd3>
     56c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     570:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     574:	89 2b       	or	r24, r25
     576:	09 f4       	brne	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     578:	f2 c1       	rjmp	.+996    	; 0x95e <__stack+0x5f>
     57a:	2d c2       	rjmp	.+1114   	; 0x9d6 <__stack+0xd7>
			debounce = false;
			_delay_ms(5);
		}

		/* When the button is held down for 4 seconds, reset to standard configuration */
		else if( (PIND & 1<<BUTTON) && debounce)
     57c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <debounce>
     580:	81 11       	cpse	r24, r1
     582:	02 c2       	rjmp	.+1028   	; 0x988 <__stack+0x89>
     584:	89 c0       	rjmp	.+274    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
		{
			if(*one_second_counter_ptr >= 4)
			{
				my_nrf.setFrequencyChannel(MINIMUM_FREQUENCY_CHANNEL + 2);
     586:	62 e6       	ldi	r22, 0x62	; 98
     588:	79 e0       	ldi	r23, 0x09	; 9
     58a:	8c e2       	ldi	r24, 0x2C	; 44
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN9nRF24L01P19setFrequencyChannelEj>
				my_nrf.setRXAddress(DATA_PIPE_0, 0xE7E7E7E7E7);
     592:	0f 2e       	mov	r0, r31
     594:	f7 ee       	ldi	r31, 0xE7	; 231
     596:	ef 2e       	mov	r14, r31
     598:	f0 2d       	mov	r31, r0
     59a:	0f 2e       	mov	r0, r31
     59c:	f7 ee       	ldi	r31, 0xE7	; 231
     59e:	ff 2e       	mov	r15, r31
     5a0:	f0 2d       	mov	r31, r0
     5a2:	07 ee       	ldi	r16, 0xE7	; 231
     5a4:	17 ee       	ldi	r17, 0xE7	; 231
     5a6:	27 ee       	ldi	r18, 0xE7	; 231
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	8c e2       	ldi	r24, 0x2C	; 44
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN9nRF24L01P12setRXAddressEhy>
				my_nrf.setRXAddress(DATA_PIPE_1, 0xC2C2C2C2C2);
     5b8:	0f 2e       	mov	r0, r31
     5ba:	f2 ec       	ldi	r31, 0xC2	; 194
     5bc:	ef 2e       	mov	r14, r31
     5be:	f0 2d       	mov	r31, r0
     5c0:	0f 2e       	mov	r0, r31
     5c2:	f2 ec       	ldi	r31, 0xC2	; 194
     5c4:	ff 2e       	mov	r15, r31
     5c6:	f0 2d       	mov	r31, r0
     5c8:	02 ec       	ldi	r16, 0xC2	; 194
     5ca:	12 ec       	ldi	r17, 0xC2	; 194
     5cc:	22 ec       	ldi	r18, 0xC2	; 194
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	8c e2       	ldi	r24, 0x2C	; 44
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN9nRF24L01P12setRXAddressEhy>
				my_nrf.setRXAddress(DATA_PIPE_2, 0xC3);
     5de:	0f 2e       	mov	r0, r31
     5e0:	f3 ec       	ldi	r31, 0xC3	; 195
     5e2:	ef 2e       	mov	r14, r31
     5e4:	f0 2d       	mov	r31, r0
     5e6:	f1 2c       	mov	r15, r1
     5e8:	00 e0       	ldi	r16, 0x00	; 0
     5ea:	10 e0       	ldi	r17, 0x00	; 0
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	62 e0       	ldi	r22, 0x02	; 2
     5f6:	8c e2       	ldi	r24, 0x2C	; 44
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN9nRF24L01P12setRXAddressEhy>
				my_nrf.setRXAddress(DATA_PIPE_3, 0xC4);
     5fe:	0f 2e       	mov	r0, r31
     600:	f4 ec       	ldi	r31, 0xC4	; 196
     602:	ef 2e       	mov	r14, r31
     604:	f0 2d       	mov	r31, r0
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	40 e0       	ldi	r20, 0x00	; 0
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	63 e0       	ldi	r22, 0x03	; 3
     610:	8c e2       	ldi	r24, 0x2C	; 44
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN9nRF24L01P12setRXAddressEhy>
				my_nrf.setRXAddress(DATA_PIPE_4, 0xC5);
     618:	0f 2e       	mov	r0, r31
     61a:	f5 ec       	ldi	r31, 0xC5	; 197
     61c:	ef 2e       	mov	r14, r31
     61e:	f0 2d       	mov	r31, r0
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	40 e0       	ldi	r20, 0x00	; 0
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	64 e0       	ldi	r22, 0x04	; 4
     62a:	8c e2       	ldi	r24, 0x2C	; 44
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN9nRF24L01P12setRXAddressEhy>
				my_nrf.setRXAddress(DATA_PIPE_5, 0xC6);
     632:	0f 2e       	mov	r0, r31
     634:	f6 ec       	ldi	r31, 0xC6	; 198
     636:	ef 2e       	mov	r14, r31
     638:	f0 2d       	mov	r31, r0
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	65 e0       	ldi	r22, 0x05	; 5
     644:	8c e2       	ldi	r24, 0x2C	; 44
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN9nRF24L01P12setRXAddressEhy>
				my_nrf.setTXAddress(0xE7E7E7E7E7);
     64c:	07 ee       	ldi	r16, 0xE7	; 231
     64e:	17 ee       	ldi	r17, 0xE7	; 231
     650:	27 ee       	ldi	r18, 0xE7	; 231
     652:	37 ee       	ldi	r19, 0xE7	; 231
     654:	47 ee       	ldi	r20, 0xE7	; 231
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	8c e2       	ldi	r24, 0x2C	; 44
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 2c 06 	call	0xc58	; 0xc58 <_ZN9nRF24L01P12setTXAddressEy>
				send_tx_timer = 5;
     664:	70 92 03 01 	sts	0x0103, r7	; 0x800103 <send_tx_timer+0x1>
     668:	60 92 02 01 	sts	0x0102, r6	; 0x800102 <send_tx_timer>
     66c:	25 2d       	mov	r18, r5
     66e:	3a 2d       	mov	r19, r10

				for(int i = 0; i < 8; i++)
				{
					PORTD ^= 1<<LED;
     670:	8b b1       	in	r24, 0x0b	; 11
     672:	8b 25       	eor	r24, r11
     674:	8b b9       	out	0x0b, r24	; 11
     676:	83 e2       	ldi	r24, 0x23	; 35
     678:	94 ef       	ldi	r25, 0xF4	; 244
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
     680:	00 00       	nop
     682:	21 50       	subi	r18, 0x01	; 1
     684:	31 09       	sbc	r19, r1
				my_nrf.setRXAddress(DATA_PIPE_4, 0xC5);
				my_nrf.setRXAddress(DATA_PIPE_5, 0xC6);
				my_nrf.setTXAddress(0xE7E7E7E7E7);
				send_tx_timer = 5;

				for(int i = 0; i < 8; i++)
     686:	a1 f7       	brne	.-24     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
				{
					PORTD ^= 1<<LED;
					_delay_ms(250);
				}
				debounce = false;
     688:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <debounce>
     68c:	e1 ee       	ldi	r30, 0xE1	; 225
     68e:	f4 e0       	ldi	r31, 0x04	; 4
     690:	31 97       	sbiw	r30, 0x01	; 1
     692:	f1 f7       	brne	.-4      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
     694:	00 c0       	rjmp	.+0      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     696:	00 00       	nop
				_delay_ms(5);
			}
		}

		/* When in RX mode, listen for incomming data */
		if(my_nrf.readable() && mode == RX_MODE)
     698:	8c e2       	ldi	r24, 0x2C	; 44
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <_ZN9nRF24L01P8readableEv>
     6a0:	88 23       	and	r24, r24
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
     6a4:	2f cf       	rjmp	.-418    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     6a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6ae:	89 2b       	or	r24, r25
     6b0:	09 f0       	breq	.+2      	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
     6b2:	28 cf       	rjmp	.-432    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     6b4:	73 c1       	rjmp	.+742    	; 0x99c <__stack+0x9d>
		{
			int rx_length = my_nrf.readData(RX_DATA, sizeof(RX_DATA));

			//Check if the user wants to set the timer
			if(RX_DATA[0] == 't' && RX_DATA[1] == '=')
     6b6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <RX_DATA+0x1>
     6ba:	9d 33       	cpi	r25, 0x3D	; 61
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
     6be:	5c c0       	rjmp	.+184    	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
		}

		/* When in RX mode, listen for incomming data */
		if(my_nrf.readable() && mode == RX_MODE)
		{
			int rx_length = my_nrf.readData(RX_DATA, sizeof(RX_DATA));
     6c0:	08 2e       	mov	r0, r24
     6c2:	00 0c       	add	r0, r0
     6c4:	99 0b       	sbc	r25, r25
     6c6:	0d b7       	in	r16, 0x3d	; 61
     6c8:	1e b7       	in	r17, 0x3e	; 62

			//Check if the user wants to set the timer
			if(RX_DATA[0] == 't' && RX_DATA[1] == '=')
			{
				//Read the data until 's'
				char new_time[TRANSFER_SIZE];
     6ca:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <TRANSFER_SIZE>
     6ce:	4d b7       	in	r20, 0x3d	; 61
     6d0:	5e b7       	in	r21, 0x3e	; 62
     6d2:	42 1b       	sub	r20, r18
     6d4:	51 09       	sbc	r21, r1
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	f8 94       	cli
     6da:	5e bf       	out	0x3e, r21	; 62
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	4d bf       	out	0x3d, r20	; 61
     6e0:	4f 5f       	subi	r20, 0xFF	; 255
     6e2:	5f 4f       	sbci	r21, 0xFF	; 255
				for(int i = 0; i < rx_length; i++)
     6e4:	18 16       	cp	r1, r24
     6e6:	19 06       	cpc	r1, r25
     6e8:	54 f1       	brlt	.+84     	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
     6ea:	37 c0       	rjmp	.+110    	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
				{
					char c = RX_DATA[i + 2];
     6ec:	6d 91       	ld	r22, X+

					if(c == 's')
     6ee:	63 37       	cpi	r22, 0x73	; 115
     6f0:	b9 f4       	brne	.+46     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
					{
						if(i == 1) send_tx_timer = RX_DATA[i + 1] - '0';
     6f2:	21 30       	cpi	r18, 0x01	; 1
     6f4:	31 05       	cpc	r19, r1
     6f6:	49 f4       	brne	.+18     	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
     6f8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <RX_DATA+0x2>
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	c0 97       	sbiw	r24, 0x30	; 48
     700:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <send_tx_timer+0x1>
     704:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <send_tx_timer>
     708:	07 c0       	rjmp	.+14     	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
						else send_tx_timer = atoi(new_time);
     70a:	ca 01       	movw	r24, r20
     70c:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <atoi>
     710:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <send_tx_timer+0x1>
     714:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <send_tx_timer>
						send_response = true;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
						break;
     71e:	1d c0       	rjmp	.+58     	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
					}
					else
					{
						//Check if the received data is valid...
						if (c >= '0' && c <= '9') new_time[i] = RX_DATA[i + 2];
     720:	70 ed       	ldi	r23, 0xD0	; 208
     722:	76 0f       	add	r23, r22
     724:	7a 30       	cpi	r23, 0x0A	; 10
     726:	38 f4       	brcc	.+14     	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
     728:	61 93       	st	Z+, r22
			//Check if the user wants to set the timer
			if(RX_DATA[0] == 't' && RX_DATA[1] == '=')
			{
				//Read the data until 's'
				char new_time[TRANSFER_SIZE];
				for(int i = 0; i < rx_length; i++)
     72a:	2f 5f       	subi	r18, 0xFF	; 255
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	82 17       	cp	r24, r18
     730:	93 07       	cpc	r25, r19
     732:	e1 f6       	brne	.-72     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
     734:	12 c0       	rjmp	.+36     	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
					{
						//Check if the received data is valid...
						if (c >= '0' && c <= '9') new_time[i] = RX_DATA[i + 2];
						else
						{
							rx_error = true;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rx_error>
							break;
     73c:	0e c0       	rjmp	.+28     	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
			{
				//Read the data until 's'
				char new_time[TRANSFER_SIZE];
				for(int i = 0; i < rx_length; i++)
				{
					char c = RX_DATA[i + 2];
     73e:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <RX_DATA+0x2>

					if(c == 's')
     742:	63 37       	cpi	r22, 0x73	; 115
     744:	11 f3       	breq	.-60     	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
						break;
					}
					else
					{
						//Check if the received data is valid...
						if (c >= '0' && c <= '9') new_time[i] = RX_DATA[i + 2];
     746:	20 ed       	ldi	r18, 0xD0	; 208
     748:	26 0f       	add	r18, r22
     74a:	2a 30       	cpi	r18, 0x0A	; 10
     74c:	a0 f7       	brcc	.-24     	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
     74e:	fa 01       	movw	r30, r20
     750:	a8 e1       	ldi	r26, 0x18	; 24
     752:	b1 e0       	ldi	r27, 0x01	; 1
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	e7 cf       	rjmp	.-50     	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
							rx_error = true;
							break;
						}
					}
				}
				if(send_tx_timer < 2 || send_tx_timer > 65535) rx_error = true;
     75a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <send_tx_timer>
     75e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <send_tx_timer+0x1>
     762:	02 97       	sbiw	r24, 0x02	; 2
     764:	18 f4       	brcc	.+6      	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rx_error>
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	1e bf       	out	0x3e, r17	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	0d bf       	out	0x3d, r16	; 61
     776:	92 c0       	rjmp	.+292    	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
			}

			//Check if the user wants to change the TX-address
			else if(RX_DATA[0] == 't' && RX_DATA[1] == 'a' && RX_DATA[2] == '=')
     778:	91 36       	cpi	r25, 0x61	; 97
     77a:	09 f0       	breq	.+2      	; 0x77e <__LOCK_REGION_LENGTH__+0x37e>
     77c:	8c c0       	rjmp	.+280    	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
     77e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <RX_DATA+0x2>
     782:	8d 33       	cpi	r24, 0x3D	; 61
     784:	09 f0       	breq	.+2      	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
     786:	87 c0       	rjmp	.+270    	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
				uint8_t tx_address[5];

				//LSByte first
				for(int i = 0; i < 5; i++)
				{
					tx_address[4 - i] = RX_DATA[i + 3];
     788:	e5 e1       	ldi	r30, 0x15	; 21
     78a:	f1 e0       	ldi	r31, 0x01	; 1
     78c:	83 81       	ldd	r24, Z+3	; 0x03
     78e:	8d 83       	std	Y+5, r24	; 0x05
     790:	84 81       	ldd	r24, Z+4	; 0x04
     792:	8c 83       	std	Y+4, r24	; 0x04
     794:	85 81       	ldd	r24, Z+5	; 0x05
     796:	8b 83       	std	Y+3, r24	; 0x03
     798:	86 81       	ldd	r24, Z+6	; 0x06
     79a:	8a 83       	std	Y+2, r24	; 0x02
     79c:	87 81       	ldd	r24, Z+7	; 0x07
     79e:	89 83       	std	Y+1, r24	; 0x01
				}
				my_nrf.setTXAddress(tx_address);
     7a0:	be 01       	movw	r22, r28
     7a2:	6f 5f       	subi	r22, 0xFF	; 255
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	8c e2       	ldi	r24, 0x2C	; 44
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	0e 94 a4 06 	call	0xd48	; 0xd48 <_ZN9nRF24L01P12setTXAddressEPh>
     7ae:	76 c0       	rjmp	.+236    	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
			}
      
			//Check if the user wants to change the RX-address
			else if(RX_DATA[0] == 'r' && RX_DATA[2] == '=')
     7b0:	92 37       	cpi	r25, 0x72	; 114
     7b2:	d1 f5       	brne	.+116    	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
     7b4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <RX_DATA+0x2>
     7b8:	8d 33       	cpi	r24, 0x3D	; 61
     7ba:	09 f0       	breq	.+2      	; 0x7be <__LOCK_REGION_LENGTH__+0x3be>
     7bc:	6c c0       	rjmp	.+216    	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
			{
				uint8_t pipe = RX_DATA[1] - '0';
     7be:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <RX_DATA+0x1>
     7c2:	60 ed       	ldi	r22, 0xD0	; 208
     7c4:	68 0f       	add	r22, r24

				if(pipe == 0 || pipe == 1)
     7c6:	62 30       	cpi	r22, 0x02	; 2
     7c8:	b8 f4       	brcc	.+46     	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
					uint8_t rx_address[5];

					//LSByte first
					for(int i = 0; i < 5; i++)
					{
						rx_address[4 - i] = RX_DATA[i + 3];
     7ca:	e5 e1       	ldi	r30, 0x15	; 21
     7cc:	f1 e0       	ldi	r31, 0x01	; 1
     7ce:	83 81       	ldd	r24, Z+3	; 0x03
     7d0:	8d 83       	std	Y+5, r24	; 0x05
     7d2:	84 81       	ldd	r24, Z+4	; 0x04
     7d4:	8c 83       	std	Y+4, r24	; 0x04
     7d6:	85 81       	ldd	r24, Z+5	; 0x05
     7d8:	8b 83       	std	Y+3, r24	; 0x03
     7da:	86 81       	ldd	r24, Z+6	; 0x06
     7dc:	8a 83       	std	Y+2, r24	; 0x02
     7de:	87 81       	ldd	r24, Z+7	; 0x07
     7e0:	89 83       	std	Y+1, r24	; 0x01
					}
					my_nrf.setRXAddress(pipe, rx_address);
     7e2:	ae 01       	movw	r20, r28
     7e4:	4f 5f       	subi	r20, 0xFF	; 255
     7e6:	5f 4f       	sbci	r21, 0xFF	; 255
     7e8:	8c e2       	ldi	r24, 0x2C	; 44
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN9nRF24L01P12setRXAddressEhPh>
					send_response = true;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
     7f6:	52 c0       	rjmp	.+164    	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
				}

				  else if(pipe >= 2 && pipe <= 5)
     7f8:	82 53       	subi	r24, 0x32	; 50
     7fa:	84 30       	cpi	r24, 0x04	; 4
     7fc:	88 f4       	brcc	.+34     	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
				  {
					  my_nrf.setRXAddress(pipe, RX_DATA[3]);
     7fe:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <RX_DATA+0x3>
     802:	f1 2c       	mov	r15, r1
     804:	00 e0       	ldi	r16, 0x00	; 0
     806:	10 e0       	ldi	r17, 0x00	; 0
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	8c e2       	ldi	r24, 0x2C	; 44
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN9nRF24L01P12setRXAddressEhy>
					  send_response = true;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
     81e:	3e c0       	rjmp	.+124    	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
				  }

				else
				{
					rx_error = true;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rx_error>
     826:	3a c0       	rjmp	.+116    	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
				}
			}
			      
		    //Check if the user wants to change the frequency
			else if(RX_DATA[0] == 'f' && RX_DATA[1] == 'r' && RX_DATA[2] == 'e' && RX_DATA[3] == '=' )
     828:	96 36       	cpi	r25, 0x66	; 102
     82a:	a9 f5       	brne	.+106    	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
     82c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <RX_DATA+0x1>
     830:	82 37       	cpi	r24, 0x72	; 114
     832:	89 f5       	brne	.+98     	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
     834:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <RX_DATA+0x2>
     838:	85 36       	cpi	r24, 0x65	; 101
     83a:	69 f5       	brne	.+90     	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
     83c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <RX_DATA+0x3>
     840:	8d 33       	cpi	r24, 0x3D	; 61
     842:	49 f5       	brne	.+82     	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
			{
				char new_frequency[4];

				for(uint8_t i = 0; i < sizeof(new_frequency); i++)
				{
					char c = RX_DATA[i + 4];
     844:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <RX_DATA+0x4>

					if(c >= '0' && c <= '9') new_frequency[i] = c;
     848:	90 ed       	ldi	r25, 0xD0	; 208
     84a:	98 0f       	add	r25, r24
     84c:	9a 30       	cpi	r25, 0x0A	; 10
     84e:	08 f4       	brcc	.+2      	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
     850:	b2 c0       	rjmp	.+356    	; 0x9b6 <__stack+0xb7>
     852:	0a c0       	rjmp	.+20     	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
			{
				char new_frequency[4];

				for(uint8_t i = 0; i < sizeof(new_frequency); i++)
				{
					char c = RX_DATA[i + 4];
     854:	8d 91       	ld	r24, X+

					if(c >= '0' && c <= '9') new_frequency[i] = c;
     856:	90 ed       	ldi	r25, 0xD0	; 208
     858:	98 0f       	add	r25, r24
     85a:	9a 30       	cpi	r25, 0x0A	; 10
     85c:	28 f4       	brcc	.+10     	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
     85e:	81 93       	st	Z+, r24
		    //Check if the user wants to change the frequency
			else if(RX_DATA[0] == 'f' && RX_DATA[1] == 'r' && RX_DATA[2] == 'e' && RX_DATA[3] == '=' )
			{
				char new_frequency[4];

				for(uint8_t i = 0; i < sizeof(new_frequency); i++)
     860:	e2 15       	cp	r30, r2
     862:	f3 05       	cpc	r31, r3
     864:	b9 f7       	brne	.-18     	; 0x854 <__LOCK_REGION_LENGTH__+0x454>
     866:	03 c0       	rjmp	.+6      	; 0x86e <__LOCK_REGION_LENGTH__+0x46e>
					char c = RX_DATA[i + 4];

					if(c >= '0' && c <= '9') new_frequency[i] = c;
					else
					{
						rx_error = true;
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rx_error>
						break;
					}
				}

				uint16_t f = atoi(new_frequency);
     86e:	ce 01       	movw	r24, r28
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <atoi>

				if(f >= MINIMUM_FREQUENCY_CHANNEL && f <= MAXIMUM_FREQUENCY_CHANNEL)
     876:	9c 01       	movw	r18, r24
     878:	20 56       	subi	r18, 0x60	; 96
     87a:	39 40       	sbci	r19, 0x09	; 9
     87c:	2e 37       	cpi	r18, 0x7E	; 126
     87e:	31 05       	cpc	r19, r1
     880:	30 f4       	brcc	.+12     	; 0x88e <__LOCK_REGION_LENGTH__+0x48e>
				{
					my_nrf.setFrequencyChannel(f);
     882:	bc 01       	movw	r22, r24
     884:	8c e2       	ldi	r24, 0x2C	; 44
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN9nRF24L01P19setFrequencyChannelEj>
     88c:	07 c0       	rjmp	.+14     	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
				}
				else rx_error = true;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rx_error>
     894:	03 c0       	rjmp	.+6      	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
			}
					
			else
			{
				rx_error = true;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rx_error>
			}
			my_nrf.setTransmitMode();
     89c:	8c e2       	ldi	r24, 0x2C	; 44
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN9nRF24L01P15setTransmitModeEv>
	    
			/* Let the user know an error occured, stay in receive mode after */
			if(rx_error)
     8a4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rx_error>
     8a8:	88 23       	and	r24, r24
     8aa:	c9 f0       	breq	.+50     	; 0x8de <__LOCK_REGION_LENGTH__+0x4de>
			{
				uint8_t ERROR_DATA[10] = {'-', 'e', 'r', 'r', 'o', 'r', '!', '-', '-', '-'};
     8ac:	8a e0       	ldi	r24, 0x0A	; 10
     8ae:	e4 e0       	ldi	r30, 0x04	; 4
     8b0:	f1 e0       	ldi	r31, 0x01	; 1
     8b2:	de 01       	movw	r26, r28
     8b4:	11 96       	adiw	r26, 0x01	; 1
     8b6:	01 90       	ld	r0, Z+
     8b8:	0d 92       	st	X+, r0
     8ba:	8a 95       	dec	r24
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <__LOCK_REGION_LENGTH__+0x4b6>
				my_nrf.writeData(ERROR_DATA, TRANSFER_SIZE);
     8be:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <TRANSFER_SIZE>
     8c2:	be 01       	movw	r22, r28
     8c4:	6f 5f       	subi	r22, 0xFF	; 255
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	8c e2       	ldi	r24, 0x2C	; 44
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZN9nRF24L01P9writeDataEPhh>
				mode = RX_MODE;
     8d0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     8d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				rx_error = false;
     8d8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rx_error>
     8dc:	13 ce       	rjmp	.-986    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
	    
			/* If no error occured, let the user know by echoing the data back
			 * Also, send the data and go in sleep mode after */
			else
			{
				if(send_response)
     8de:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     8e2:	88 23       	and	r24, r24
     8e4:	61 f0       	breq	.+24     	; 0x8fe <__LOCK_REGION_LENGTH__+0x4fe>
				{
					my_nrf.writeData(RX_DATA, TRANSFER_SIZE);
     8e6:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <TRANSFER_SIZE>
     8ea:	65 e1       	ldi	r22, 0x15	; 21
     8ec:	71 e0       	ldi	r23, 0x01	; 1
     8ee:	8c e2       	ldi	r24, 0x2C	; 44
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZN9nRF24L01P9writeDataEPhh>
					send_tx_data();
     8f6:	0e 94 25 01 	call	0x24a	; 0x24a <_Z12send_tx_datav>
					send_response = false;
     8fa:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
				}
				one_second_counter = 0;
     8fe:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <one_second_counter+0x1>
     902:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <one_second_counter>
				mode = TX_MODE;
     906:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <__data_start+0x1>
     90a:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__data_start>
				PORTD &= ~(1<<LED);
     90e:	5b 98       	cbi	0x0b, 3	; 11
     910:	f9 cd       	rjmp	.-1038   	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
		}

		/* If button is pressed, toggle between RX en TX mode */
		if((PIND & 1<<BUTTON) && !debounce)
		{
			debounce = true;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <debounce>
			one_second_counter = 0;
     918:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <one_second_counter+0x1>
     91c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <one_second_counter>
     920:	81 ee       	ldi	r24, 0xE1	; 225
     922:	94 e0       	ldi	r25, 0x04	; 4
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	f1 f7       	brne	.-4      	; 0x924 <__stack+0x25>
     928:	00 c0       	rjmp	.+0      	; 0x92a <__stack+0x2b>
     92a:	00 00       	nop
     92c:	b5 ce       	rjmp	.-662    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
			_delay_ms(5);
		}
		else if(!(PIND & 1<<BUTTON) && debounce && mode == TX_MODE)
     92e:	4d 9b       	sbis	0x09, 5	; 9
     930:	0b ce       	rjmp	.-1002   	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     932:	12 c0       	rjmp	.+36     	; 0x958 <__stack+0x59>
		{
			my_nrf.setReceiveMode();
     934:	8c e2       	ldi	r24, 0x2C	; 44
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN9nRF24L01P14setReceiveModeEv>
			PORTD |= 1<<LED;
     93c:	5b 9a       	sbi	0x0b, 3	; 11
			mode = RX_MODE;
     93e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     942:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			debounce = false;
     946:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <debounce>
     94a:	e1 ee       	ldi	r30, 0xE1	; 225
     94c:	f4 e0       	ldi	r31, 0x04	; 4
     94e:	31 97       	sbiw	r30, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <__stack+0x4f>
     952:	00 c0       	rjmp	.+0      	; 0x954 <__stack+0x55>
     954:	00 00       	nop
     956:	a0 ce       	rjmp	.-704    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
			_delay_ms(5);
		}
		else if(!(PIND & 1<<BUTTON) && debounce && mode == RX_MODE)
     958:	4d 9b       	sbis	0x09, 5	; 9
     95a:	03 ce       	rjmp	.-1018   	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     95c:	12 c0       	rjmp	.+36     	; 0x982 <__stack+0x83>
		{
			my_nrf.setTransmitMode();
     95e:	8c e2       	ldi	r24, 0x2C	; 44
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN9nRF24L01P15setTransmitModeEv>
			PORTD &= ~(1<<LED);
     966:	5b 98       	cbi	0x0b, 3	; 11
			mode = TX_MODE;
     968:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <__data_start+0x1>
     96c:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__data_start>
			debounce = false;
     970:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <debounce>
     974:	81 ee       	ldi	r24, 0xE1	; 225
     976:	94 e0       	ldi	r25, 0x04	; 4
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <__stack+0x79>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <__stack+0x7f>
     97e:	00 00       	nop
     980:	8b ce       	rjmp	.-746    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
			_delay_ms(5);
		}

		/* When the button is held down for 4 seconds, reset to standard configuration */
		else if( (PIND & 1<<BUTTON) && debounce)
     982:	4d 99       	sbic	0x09, 5	; 9
     984:	fb cd       	rjmp	.-1034   	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     986:	88 ce       	rjmp	.-752    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
		{
			if(*one_second_counter_ptr >= 4)
     988:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <one_second_counter_ptr>
     98c:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <one_second_counter_ptr+0x1>
     990:	80 81       	ld	r24, Z
     992:	91 81       	ldd	r25, Z+1	; 0x01
     994:	04 97       	sbiw	r24, 0x04	; 4
     996:	08 f4       	brcc	.+2      	; 0x99a <__stack+0x9b>
     998:	7f ce       	rjmp	.-770    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
     99a:	f5 cd       	rjmp	.-1046   	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
		}

		/* When in RX mode, listen for incomming data */
		if(my_nrf.readable() && mode == RX_MODE)
		{
			int rx_length = my_nrf.readData(RX_DATA, sizeof(RX_DATA));
     99c:	4a e0       	ldi	r20, 0x0A	; 10
     99e:	65 e1       	ldi	r22, 0x15	; 21
     9a0:	71 e0       	ldi	r23, 0x01	; 1
     9a2:	8c e2       	ldi	r24, 0x2C	; 44
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <_ZN9nRF24L01P8readDataEPhh>

			//Check if the user wants to set the timer
			if(RX_DATA[0] == 't' && RX_DATA[1] == '=')
     9aa:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <RX_DATA>
     9ae:	94 37       	cpi	r25, 0x74	; 116
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <__stack+0xb5>
     9b2:	fe ce       	rjmp	.-516    	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
     9b4:	80 ce       	rjmp	.-768    	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>

				for(uint8_t i = 0; i < sizeof(new_frequency); i++)
				{
					char c = RX_DATA[i + 4];

					if(c >= '0' && c <= '9') new_frequency[i] = c;
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	aa e1       	ldi	r26, 0x1A	; 26
     9ba:	b1 e0       	ldi	r27, 0x01	; 1
     9bc:	fe 01       	movw	r30, r28
     9be:	32 96       	adiw	r30, 0x02	; 2
     9c0:	49 cf       	rjmp	.-366    	; 0x854 <__LOCK_REGION_LENGTH__+0x454>
		{
			debounce = true;
			one_second_counter = 0;
			_delay_ms(5);
		}
		else if(!(PIND & 1<<BUTTON) && debounce && mode == TX_MODE)
     9c2:	4d 9b       	sbis	0x09, 5	; 9
     9c4:	c6 cd       	rjmp	.-1140   	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     9c6:	c8 cf       	rjmp	.-112    	; 0x958 <__stack+0x59>
			PORTD |= 1<<LED;
			mode = RX_MODE;
			debounce = false;
			_delay_ms(5);
		}
		else if(!(PIND & 1<<BUTTON) && debounce && mode == RX_MODE)
     9c8:	4d 9b       	sbis	0x09, 5	; 9
     9ca:	d0 cd       	rjmp	.-1120   	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
     9cc:	da cf       	rjmp	.-76     	; 0x982 <__stack+0x83>
     9ce:	89 b1       	in	r24, 0x09	; 9
     9d0:	d8 cf       	rjmp	.-80     	; 0x982 <__stack+0x83>
			debounce = false;
			_delay_ms(5);
		}

		/* When the button is held down for 4 seconds, reset to standard configuration */
		else if( (PIND & 1<<BUTTON) && debounce)
     9d2:	89 b1       	in	r24, 0x09	; 9
     9d4:	61 ce       	rjmp	.-830    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
     9d6:	4d 99       	sbic	0x09, 5	; 9
     9d8:	d7 cf       	rjmp	.-82     	; 0x988 <__stack+0x89>
     9da:	5e ce       	rjmp	.-836    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>

000009dc <__vector_11>:
	//Put the nRF24L01+ in sleep mode
	my_nrf.powerDown();
}

ISR (TIMER1_COMPA_vect)
{
     9dc:	1f 92       	push	r1
     9de:	0f 92       	push	r0
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	0f 92       	push	r0
     9e4:	11 24       	eor	r1, r1
     9e6:	8f 93       	push	r24
     9e8:	9f 93       	push	r25
	one_second_counter++;
     9ea:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <one_second_counter>
     9ee:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <one_second_counter+0x1>
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <one_second_counter+0x1>
     9f8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <one_second_counter>
}
     9fc:	9f 91       	pop	r25
     9fe:	8f 91       	pop	r24
     a00:	0f 90       	pop	r0
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	0f 90       	pop	r0
     a06:	1f 90       	pop	r1
     a08:	18 95       	reti

00000a0a <_GLOBAL__sub_I_my_nrf>:

//Prototypes
void send_tx_data(void);

//Make objects from classes
nRF24L01P my_nrf;
     a0a:	8c e2       	ldi	r24, 0x2C	; 44
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <_ZN9nRF24L01PC1Ev>
adc       my_adc;
     a12:	8b e2       	ldi	r24, 0x2B	; 43
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	0e 94 66 00 	call	0xcc	; 0xcc <_ZN3adcC1Ev>
dht       my_humidity;
     a1a:	8a e2       	ldi	r24, 0x2A	; 42
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 8f 00 	call	0x11e	; 0x11e <_ZN3dhtC1Ev>
     a22:	08 95       	ret

00000a24 <_ZN9nRF24L01P12setRXAddressEhy>:
	old_reg = getRegister(REG_ADDRESS_DYNPD);

	new_reg = old_reg | _ENABLE_DATA_PIPE_ALL;
	
	setRegister(REG_ADDRESS_DYNPD, new_reg);
}
     a24:	2f 92       	push	r2
     a26:	3f 92       	push	r3
     a28:	4f 92       	push	r4
     a2a:	5f 92       	push	r5
     a2c:	6f 92       	push	r6
     a2e:	7f 92       	push	r7
     a30:	8f 92       	push	r8
     a32:	9f 92       	push	r9
     a34:	af 92       	push	r10
     a36:	bf 92       	push	r11
     a38:	cf 92       	push	r12
     a3a:	df 92       	push	r13
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
     a4c:	27 97       	sbiw	r28, 0x07	; 7
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
     a58:	66 30       	cpi	r22, 0x06	; 6
     a5a:	08 f0       	brcs	.+2      	; 0xa5e <_ZN9nRF24L01P12setRXAddressEhy+0x3a>
     a5c:	92 c0       	rjmp	.+292    	; 0xb82 <_ZN9nRF24L01P12setRXAddressEhy+0x15e>
     a5e:	25 2e       	mov	r2, r21
     a60:	34 2e       	mov	r3, r20
     a62:	43 2e       	mov	r4, r19
     a64:	52 2e       	mov	r5, r18
     a66:	f0 2f       	mov	r31, r16
     a68:	e6 2f       	mov	r30, r22
     a6a:	6c 01       	movw	r12, r24
     a6c:	62 30       	cpi	r22, 0x02	; 2
     a6e:	98 f4       	brcc	.+38     	; 0xa96 <_ZN9nRF24L01P12setRXAddressEhy+0x72>
     a70:	2e 2d       	mov	r18, r14
     a72:	3f 2d       	mov	r19, r15
     a74:	40 2f       	mov	r20, r16
     a76:	51 2f       	mov	r21, r17
     a78:	65 2d       	mov	r22, r5
     a7a:	74 2d       	mov	r23, r4
     a7c:	83 2d       	mov	r24, r3
     a7e:	92 2d       	mov	r25, r2
     a80:	2f 3f       	cpi	r18, 0xFF	; 255
     a82:	3f 4f       	sbci	r19, 0xFF	; 255
     a84:	4f 4f       	sbci	r20, 0xFF	; 255
     a86:	5f 4f       	sbci	r21, 0xFF	; 255
     a88:	6f 4f       	sbci	r22, 0xFF	; 255
     a8a:	71 05       	cpc	r23, r1
     a8c:	81 05       	cpc	r24, r1
     a8e:	91 05       	cpc	r25, r1
     a90:	a9 f0       	breq	.+42     	; 0xabc <_ZN9nRF24L01P12setRXAddressEhy+0x98>
     a92:	a0 f0       	brcs	.+40     	; 0xabc <_ZN9nRF24L01P12setRXAddressEhy+0x98>
     a94:	76 c0       	rjmp	.+236    	; 0xb82 <_ZN9nRF24L01P12setRXAddressEhy+0x15e>
     a96:	2e 2d       	mov	r18, r14
     a98:	3f 2d       	mov	r19, r15
     a9a:	40 2f       	mov	r20, r16
     a9c:	51 2f       	mov	r21, r17
     a9e:	65 2d       	mov	r22, r5
     aa0:	74 2d       	mov	r23, r4
     aa2:	83 2d       	mov	r24, r3
     aa4:	92 2d       	mov	r25, r2
     aa6:	2f 3f       	cpi	r18, 0xFF	; 255
     aa8:	31 05       	cpc	r19, r1
     aaa:	41 05       	cpc	r20, r1
     aac:	51 05       	cpc	r21, r1
     aae:	61 05       	cpc	r22, r1
     ab0:	71 05       	cpc	r23, r1
     ab2:	81 05       	cpc	r24, r1
     ab4:	91 05       	cpc	r25, r1
     ab6:	e1 f1       	breq	.+120    	; 0xb30 <_ZN9nRF24L01P12setRXAddressEhy+0x10c>
     ab8:	d8 f1       	brcs	.+118    	; 0xb30 <_ZN9nRF24L01P12setRXAddressEhy+0x10c>
     aba:	63 c0       	rjmp	.+198    	; 0xb82 <_ZN9nRF24L01P12setRXAddressEhy+0x15e>
     abc:	ce 01       	movw	r24, r28
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	5c 01       	movw	r10, r24
     ac2:	3c 01       	movw	r6, r24
     ac4:	1f 82       	std	Y+7, r1	; 0x07
     ac6:	1e 82       	std	Y+6, r1	; 0x06
     ac8:	2e 2d       	mov	r18, r14
     aca:	3f 2d       	mov	r19, r15
     acc:	4f 2f       	mov	r20, r31
     ace:	51 2f       	mov	r21, r17
     ad0:	65 2d       	mov	r22, r5
     ad2:	74 2d       	mov	r23, r4
     ad4:	83 2d       	mov	r24, r3
     ad6:	92 2d       	mov	r25, r2
     ad8:	0e 81       	ldd	r16, Y+6	; 0x06
     ada:	0e 94 4d 0a 	call	0x149a	; 0x149a <__lshrdi3>
     ade:	d3 01       	movw	r26, r6
     ae0:	2d 93       	st	X+, r18
     ae2:	3d 01       	movw	r6, r26
     ae4:	ae 81       	ldd	r26, Y+6	; 0x06
     ae6:	bf 81       	ldd	r27, Y+7	; 0x07
     ae8:	18 96       	adiw	r26, 0x08	; 8
     aea:	bf 83       	std	Y+7, r27	; 0x07
     aec:	ae 83       	std	Y+6, r26	; 0x06
     aee:	98 97       	sbiw	r26, 0x28	; 40
     af0:	59 f7       	brne	.-42     	; 0xac8 <_ZN9nRF24L01P12setRXAddressEhy+0xa4>
     af2:	2a 98       	cbi	0x05, 2	; 5
     af4:	e1 11       	cpse	r30, r1
     af6:	06 c0       	rjmp	.+12     	; 0xb04 <_ZN9nRF24L01P12setRXAddressEhy+0xe0>
     af8:	6a e2       	ldi	r22, 0x2A	; 42
     afa:	c6 01       	movw	r24, r12
     afc:	02 96       	adiw	r24, 0x02	; 2
     afe:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     b02:	38 c0       	rjmp	.+112    	; 0xb74 <_ZN9nRF24L01P12setRXAddressEhy+0x150>
     b04:	6b e2       	ldi	r22, 0x2B	; 43
     b06:	c6 01       	movw	r24, r12
     b08:	02 96       	adiw	r24, 0x02	; 2
     b0a:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     b0e:	32 c0       	rjmp	.+100    	; 0xb74 <_ZN9nRF24L01P12setRXAddressEhy+0x150>
     b10:	f5 01       	movw	r30, r10
     b12:	61 91       	ld	r22, Z+
     b14:	5f 01       	movw	r10, r30
     b16:	c6 01       	movw	r24, r12
     b18:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     b1c:	a0 16       	cp	r10, r16
     b1e:	b1 06       	cpc	r11, r17
     b20:	b9 f7       	brne	.-18     	; 0xb10 <_ZN9nRF24L01P12setRXAddressEhy+0xec>
     b22:	2a 9a       	sbi	0x05, 2	; 5
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	29 c0       	rjmp	.+82     	; 0xb82 <_ZN9nRF24L01P12setRXAddressEhy+0x15e>
     b30:	e3 30       	cpi	r30, 0x03	; 3
     b32:	49 f0       	breq	.+18     	; 0xb46 <_ZN9nRF24L01P12setRXAddressEhy+0x122>
     b34:	18 f4       	brcc	.+6      	; 0xb3c <_ZN9nRF24L01P12setRXAddressEhy+0x118>
     b36:	e2 30       	cpi	r30, 0x02	; 2
     b38:	71 f0       	breq	.+28     	; 0xb56 <_ZN9nRF24L01P12setRXAddressEhy+0x132>
     b3a:	0b c0       	rjmp	.+22     	; 0xb52 <_ZN9nRF24L01P12setRXAddressEhy+0x12e>
     b3c:	e4 30       	cpi	r30, 0x04	; 4
     b3e:	29 f0       	breq	.+10     	; 0xb4a <_ZN9nRF24L01P12setRXAddressEhy+0x126>
     b40:	e5 30       	cpi	r30, 0x05	; 5
     b42:	29 f0       	breq	.+10     	; 0xb4e <_ZN9nRF24L01P12setRXAddressEhy+0x12a>
     b44:	06 c0       	rjmp	.+12     	; 0xb52 <_ZN9nRF24L01P12setRXAddressEhy+0x12e>
     b46:	6d e0       	ldi	r22, 0x0D	; 13
     b48:	07 c0       	rjmp	.+14     	; 0xb58 <_ZN9nRF24L01P12setRXAddressEhy+0x134>
     b4a:	6e e0       	ldi	r22, 0x0E	; 14
     b4c:	05 c0       	rjmp	.+10     	; 0xb58 <_ZN9nRF24L01P12setRXAddressEhy+0x134>
     b4e:	6f e0       	ldi	r22, 0x0F	; 15
     b50:	03 c0       	rjmp	.+6      	; 0xb58 <_ZN9nRF24L01P12setRXAddressEhy+0x134>
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <_ZN9nRF24L01P12setRXAddressEhy+0x134>
     b56:	6c e0       	ldi	r22, 0x0C	; 12
     b58:	2a 98       	cbi	0x05, 2	; 5
     b5a:	f2 e0       	ldi	r31, 0x02	; 2
     b5c:	cf 0e       	add	r12, r31
     b5e:	d1 1c       	adc	r13, r1
     b60:	60 62       	ori	r22, 0x20	; 32
     b62:	c6 01       	movw	r24, r12
     b64:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     b68:	6e 2d       	mov	r22, r14
     b6a:	c6 01       	movw	r24, r12
     b6c:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     b70:	2a 9a       	sbi	0x05, 2	; 5
     b72:	07 c0       	rjmp	.+14     	; 0xb82 <_ZN9nRF24L01P12setRXAddressEhy+0x15e>
     b74:	8e 01       	movw	r16, r28
     b76:	0a 5f       	subi	r16, 0xFA	; 250
     b78:	1f 4f       	sbci	r17, 0xFF	; 255
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	c8 0e       	add	r12, r24
     b7e:	d1 1c       	adc	r13, r1
     b80:	c7 cf       	rjmp	.-114    	; 0xb10 <_ZN9nRF24L01P12setRXAddressEhy+0xec>
     b82:	27 96       	adiw	r28, 0x07	; 7
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	7f 90       	pop	r7
     ba8:	6f 90       	pop	r6
     baa:	5f 90       	pop	r5
     bac:	4f 90       	pop	r4
     bae:	3f 90       	pop	r3
     bb0:	2f 90       	pop	r2
     bb2:	08 95       	ret

00000bb4 <_ZN9nRF24L01P12setRXAddressEhPh>:
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	66 30       	cpi	r22, 0x06	; 6
     bc2:	08 f0       	brcs	.+2      	; 0xbc6 <_ZN9nRF24L01P12setRXAddressEhPh+0x12>
     bc4:	42 c0       	rjmp	.+132    	; 0xc4a <_ZN9nRF24L01P12setRXAddressEhPh+0x96>
     bc6:	8a 01       	movw	r16, r20
     bc8:	ec 01       	movw	r28, r24
     bca:	62 30       	cpi	r22, 0x02	; 2
     bcc:	c0 f4       	brcc	.+48     	; 0xbfe <_ZN9nRF24L01P12setRXAddressEhPh+0x4a>
     bce:	2a 98       	cbi	0x05, 2	; 5
     bd0:	61 11       	cpse	r22, r1
     bd2:	05 c0       	rjmp	.+10     	; 0xbde <_ZN9nRF24L01P12setRXAddressEhPh+0x2a>
     bd4:	6a e2       	ldi	r22, 0x2A	; 42
     bd6:	02 96       	adiw	r24, 0x02	; 2
     bd8:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     bdc:	31 c0       	rjmp	.+98     	; 0xc40 <_ZN9nRF24L01P12setRXAddressEhPh+0x8c>
     bde:	6b e2       	ldi	r22, 0x2B	; 43
     be0:	02 96       	adiw	r24, 0x02	; 2
     be2:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     be6:	2c c0       	rjmp	.+88     	; 0xc40 <_ZN9nRF24L01P12setRXAddressEhPh+0x8c>
     be8:	f7 01       	movw	r30, r14
     bea:	61 91       	ld	r22, Z+
     bec:	7f 01       	movw	r14, r30
     bee:	ce 01       	movw	r24, r28
     bf0:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     bf4:	e0 16       	cp	r14, r16
     bf6:	f1 06       	cpc	r15, r17
     bf8:	b9 f7       	brne	.-18     	; 0xbe8 <_ZN9nRF24L01P12setRXAddressEhPh+0x34>
     bfa:	2a 9a       	sbi	0x05, 2	; 5
     bfc:	26 c0       	rjmp	.+76     	; 0xc4a <_ZN9nRF24L01P12setRXAddressEhPh+0x96>
     bfe:	63 30       	cpi	r22, 0x03	; 3
     c00:	49 f0       	breq	.+18     	; 0xc14 <_ZN9nRF24L01P12setRXAddressEhPh+0x60>
     c02:	18 f4       	brcc	.+6      	; 0xc0a <_ZN9nRF24L01P12setRXAddressEhPh+0x56>
     c04:	62 30       	cpi	r22, 0x02	; 2
     c06:	71 f0       	breq	.+28     	; 0xc24 <_ZN9nRF24L01P12setRXAddressEhPh+0x70>
     c08:	0b c0       	rjmp	.+22     	; 0xc20 <_ZN9nRF24L01P12setRXAddressEhPh+0x6c>
     c0a:	64 30       	cpi	r22, 0x04	; 4
     c0c:	29 f0       	breq	.+10     	; 0xc18 <_ZN9nRF24L01P12setRXAddressEhPh+0x64>
     c0e:	65 30       	cpi	r22, 0x05	; 5
     c10:	29 f0       	breq	.+10     	; 0xc1c <_ZN9nRF24L01P12setRXAddressEhPh+0x68>
     c12:	06 c0       	rjmp	.+12     	; 0xc20 <_ZN9nRF24L01P12setRXAddressEhPh+0x6c>
     c14:	6d e0       	ldi	r22, 0x0D	; 13
     c16:	07 c0       	rjmp	.+14     	; 0xc26 <_ZN9nRF24L01P12setRXAddressEhPh+0x72>
     c18:	6e e0       	ldi	r22, 0x0E	; 14
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <_ZN9nRF24L01P12setRXAddressEhPh+0x72>
     c1c:	6f e0       	ldi	r22, 0x0F	; 15
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <_ZN9nRF24L01P12setRXAddressEhPh+0x72>
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	01 c0       	rjmp	.+2      	; 0xc26 <_ZN9nRF24L01P12setRXAddressEhPh+0x72>
     c24:	6c e0       	ldi	r22, 0x0C	; 12
     c26:	2a 98       	cbi	0x05, 2	; 5
     c28:	22 96       	adiw	r28, 0x02	; 2
     c2a:	60 62       	ori	r22, 0x20	; 32
     c2c:	ce 01       	movw	r24, r28
     c2e:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     c32:	f8 01       	movw	r30, r16
     c34:	60 81       	ld	r22, Z
     c36:	ce 01       	movw	r24, r28
     c38:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     c3c:	2a 9a       	sbi	0x05, 2	; 5
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <_ZN9nRF24L01P12setRXAddressEhPh+0x96>
     c40:	78 01       	movw	r14, r16
     c42:	0b 5f       	subi	r16, 0xFB	; 251
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
     c46:	22 96       	adiw	r28, 0x02	; 2
     c48:	cf cf       	rjmp	.-98     	; 0xbe8 <_ZN9nRF24L01P12setRXAddressEhPh+0x34>
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	08 95       	ret

00000c58 <_ZN9nRF24L01P12setTXAddressEy>:
     c58:	3f 92       	push	r3
     c5a:	4f 92       	push	r4
     c5c:	5f 92       	push	r5
     c5e:	6f 92       	push	r6
     c60:	7f 92       	push	r7
     c62:	8f 92       	push	r8
     c64:	9f 92       	push	r9
     c66:	af 92       	push	r10
     c68:	bf 92       	push	r11
     c6a:	cf 92       	push	r12
     c6c:	df 92       	push	r13
     c6e:	ef 92       	push	r14
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <_ZN9nRF24L01P12setTXAddressEy+0x24>
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <_ZN9nRF24L01P12setTXAddressEy+0x26>
     c7e:	1f 92       	push	r1
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	5c 01       	movw	r10, r24
     c86:	90 2e       	mov	r9, r16
     c88:	82 2e       	mov	r8, r18
     c8a:	73 2e       	mov	r7, r19
     c8c:	64 2e       	mov	r6, r20
     c8e:	55 2e       	mov	r5, r21
     c90:	46 2e       	mov	r4, r22
     c92:	37 2e       	mov	r3, r23
     c94:	20 2f       	mov	r18, r16
     c96:	31 2f       	mov	r19, r17
     c98:	48 2d       	mov	r20, r8
     c9a:	57 2d       	mov	r21, r7
     c9c:	66 2d       	mov	r22, r6
     c9e:	75 2d       	mov	r23, r5
     ca0:	84 2d       	mov	r24, r4
     ca2:	93 2d       	mov	r25, r3
     ca4:	2f 3f       	cpi	r18, 0xFF	; 255
     ca6:	3f 4f       	sbci	r19, 0xFF	; 255
     ca8:	4f 4f       	sbci	r20, 0xFF	; 255
     caa:	5f 4f       	sbci	r21, 0xFF	; 255
     cac:	6f 4f       	sbci	r22, 0xFF	; 255
     cae:	71 05       	cpc	r23, r1
     cb0:	81 05       	cpc	r24, r1
     cb2:	91 05       	cpc	r25, r1
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <_ZN9nRF24L01P12setTXAddressEy+0x60>
     cb6:	88 f5       	brcc	.+98     	; 0xd1a <_ZN9nRF24L01P12setTXAddressEy+0xc2>
     cb8:	ce 01       	movw	r24, r28
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	7c 01       	movw	r14, r24
     cbe:	dc 01       	movw	r26, r24
     cc0:	e0 e0       	ldi	r30, 0x00	; 0
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	29 2d       	mov	r18, r9
     cc6:	31 2f       	mov	r19, r17
     cc8:	48 2d       	mov	r20, r8
     cca:	57 2d       	mov	r21, r7
     ccc:	66 2d       	mov	r22, r6
     cce:	75 2d       	mov	r23, r5
     cd0:	84 2d       	mov	r24, r4
     cd2:	93 2d       	mov	r25, r3
     cd4:	0e 2f       	mov	r16, r30
     cd6:	0e 94 4d 0a 	call	0x149a	; 0x149a <__lshrdi3>
     cda:	2d 93       	st	X+, r18
     cdc:	38 96       	adiw	r30, 0x08	; 8
     cde:	e8 32       	cpi	r30, 0x28	; 40
     ce0:	f1 05       	cpc	r31, r1
     ce2:	81 f7       	brne	.-32     	; 0xcc4 <_ZN9nRF24L01P12setTXAddressEy+0x6c>
     ce4:	85 01       	movw	r16, r10
     ce6:	2a 98       	cbi	0x05, 2	; 5
     ce8:	0e 5f       	subi	r16, 0xFE	; 254
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
     cec:	60 e3       	ldi	r22, 0x30	; 48
     cee:	c8 01       	movw	r24, r16
     cf0:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     cf4:	5e 01       	movw	r10, r28
     cf6:	96 e0       	ldi	r25, 0x06	; 6
     cf8:	a9 0e       	add	r10, r25
     cfa:	b1 1c       	adc	r11, r1
     cfc:	f7 01       	movw	r30, r14
     cfe:	61 91       	ld	r22, Z+
     d00:	7f 01       	movw	r14, r30
     d02:	c8 01       	movw	r24, r16
     d04:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     d08:	ea 14       	cp	r14, r10
     d0a:	fb 04       	cpc	r15, r11
     d0c:	b9 f7       	brne	.-18     	; 0xcfc <_ZN9nRF24L01P12setTXAddressEy+0xa4>
     d0e:	2a 9a       	sbi	0x05, 2	; 5
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	df 90       	pop	r13
     d32:	cf 90       	pop	r12
     d34:	bf 90       	pop	r11
     d36:	af 90       	pop	r10
     d38:	9f 90       	pop	r9
     d3a:	8f 90       	pop	r8
     d3c:	7f 90       	pop	r7
     d3e:	6f 90       	pop	r6
     d40:	5f 90       	pop	r5
     d42:	4f 90       	pop	r4
     d44:	3f 90       	pop	r3
     d46:	08 95       	ret

00000d48 <_ZN9nRF24L01P12setTXAddressEPh>:
     d48:	ef 92       	push	r14
     d4a:	ff 92       	push	r15
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	eb 01       	movw	r28, r22
     d56:	2a 98       	cbi	0x05, 2	; 5
     d58:	02 96       	adiw	r24, 0x02	; 2
     d5a:	7c 01       	movw	r14, r24
     d5c:	60 e3       	ldi	r22, 0x30	; 48
     d5e:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     d62:	8e 01       	movw	r16, r28
     d64:	25 96       	adiw	r28, 0x05	; 5
     d66:	f8 01       	movw	r30, r16
     d68:	61 91       	ld	r22, Z+
     d6a:	8f 01       	movw	r16, r30
     d6c:	c7 01       	movw	r24, r14
     d6e:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     d72:	0c 17       	cp	r16, r28
     d74:	1d 07       	cpc	r17, r29
     d76:	b9 f7       	brne	.-18     	; 0xd66 <_ZN9nRF24L01P12setTXAddressEPh+0x1e>
     d78:	2a 9a       	sbi	0x05, 2	; 5
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	08 95       	ret

00000d88 <_ZN9nRF24L01P11getRegisterEh>:
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	2a 98       	cbi	0x05, 2	; 5
     d8e:	ec 01       	movw	r28, r24
     d90:	22 96       	adiw	r28, 0x02	; 2
     d92:	ce 01       	movw	r24, r28
     d94:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     d98:	6f ef       	ldi	r22, 0xFF	; 255
     d9a:	ce 01       	movw	r24, r28
     d9c:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     da0:	2a 9a       	sbi	0x05, 2	; 5
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <_ZN9nRF24L01P11setRegisterEhh>:
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	14 2f       	mov	r17, r20
     db0:	2a 98       	cbi	0x05, 2	; 5
     db2:	ec 01       	movw	r28, r24
     db4:	22 96       	adiw	r28, 0x02	; 2
     db6:	60 62       	ori	r22, 0x20	; 32
     db8:	ce 01       	movw	r24, r28
     dba:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     dbe:	61 2f       	mov	r22, r17
     dc0:	ce 01       	movw	r24, r28
     dc2:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
     dc6:	2a 9a       	sbi	0x05, 2	; 5
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <_ZN9nRF24L01P11setRegisterEhh+0x22>
     dca:	00 c0       	rjmp	.+0      	; 0xdcc <_ZN9nRF24L01P11setRegisterEhh+0x24>
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	08 95       	ret

00000dd4 <_ZN9nRF24L01P7powerUpEv>:
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	fc 01       	movw	r30, r24
     dda:	20 81       	ld	r18, Z
     ddc:	21 30       	cpi	r18, 0x01	; 1
     dde:	a1 f0       	breq	.+40     	; 0xe08 <_ZN9nRF24L01P7powerUpEv+0x34>
     de0:	ec 01       	movw	r28, r24
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN9nRF24L01P11getRegisterEh>
     de8:	8e 7f       	andi	r24, 0xFE	; 254
     dea:	48 2f       	mov	r20, r24
     dec:	42 60       	ori	r20, 0x02	; 2
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	ce 01       	movw	r24, r28
     df2:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
     df6:	86 e7       	ldi	r24, 0x76	; 118
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <_ZN9nRF24L01P7powerUpEv+0x26>
     dfe:	00 c0       	rjmp	.+0      	; 0xe00 <_ZN9nRF24L01P7powerUpEv+0x2c>
     e00:	00 00       	nop
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	88 83       	st	Y, r24
     e06:	19 82       	std	Y+1, r1	; 0x01
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <_ZN9nRF24L01P9powerDownEv>:
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	fc 01       	movw	r30, r24
     e14:	20 81       	ld	r18, Z
     e16:	22 23       	and	r18, r18
     e18:	71 f0       	breq	.+28     	; 0xe36 <_ZN9nRF24L01P9powerDownEv+0x28>
     e1a:	ec 01       	movw	r28, r24
     e1c:	2e 98       	cbi	0x05, 6	; 5
     e1e:	00 c0       	rjmp	.+0      	; 0xe20 <_ZN9nRF24L01P9powerDownEv+0x12>
     e20:	00 c0       	rjmp	.+0      	; 0xe22 <_ZN9nRF24L01P9powerDownEv+0x14>
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN9nRF24L01P11getRegisterEh>
     e28:	48 2f       	mov	r20, r24
     e2a:	4d 7f       	andi	r20, 0xFD	; 253
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	ce 01       	movw	r24, r28
     e30:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
     e34:	18 82       	st	Y, r1
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <_ZN9nRF24L01P15setTransmitModeEv>:
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	ec 01       	movw	r28, r24
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	19 f4       	brne	.+6      	; 0xe4e <_ZN9nRF24L01P15setTransmitModeEv+0x12>
     e48:	ce 01       	movw	r24, r28
     e4a:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN9nRF24L01P9powerDownEv>
     e4e:	ce 01       	movw	r24, r28
     e50:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN9nRF24L01P7powerUpEv>
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	88 23       	and	r24, r24
     e58:	89 f0       	breq	.+34     	; 0xe7c <_ZN9nRF24L01P15setTransmitModeEv+0x40>
     e5a:	2e 98       	cbi	0x05, 6	; 5
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	ce 01       	movw	r24, r28
     e60:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN9nRF24L01P11getRegisterEh>
     e64:	48 2f       	mov	r20, r24
     e66:	4e 7f       	andi	r20, 0xFE	; 254
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	ce 01       	movw	r24, r28
     e6c:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
     e70:	8b e2       	ldi	r24, 0x2B	; 43
     e72:	8a 95       	dec	r24
     e74:	f1 f7       	brne	.-4      	; 0xe72 <_ZN9nRF24L01P15setTransmitModeEv+0x36>
     e76:	00 00       	nop
     e78:	19 82       	std	Y+1, r1	; 0x01
     e7a:	05 c0       	rjmp	.+10     	; 0xe86 <_ZN9nRF24L01P15setTransmitModeEv+0x4a>
     e7c:	2e 98       	cbi	0x05, 6	; 5
     e7e:	8b e2       	ldi	r24, 0x2B	; 43
     e80:	8a 95       	dec	r24
     e82:	f1 f7       	brne	.-4      	; 0xe80 <_ZN9nRF24L01P15setTransmitModeEv+0x44>
     e84:	00 00       	nop
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	08 95       	ret

00000e8c <_ZN9nRF24L01P15setTransferSizeEhh>:
     e8c:	41 32       	cpi	r20, 0x21	; 33
     e8e:	60 f5       	brcc	.+88     	; 0xee8 <_ZN9nRF24L01P15setTransferSizeEhh+0x5c>
     e90:	62 30       	cpi	r22, 0x02	; 2
     e92:	a1 f0       	breq	.+40     	; 0xebc <_ZN9nRF24L01P15setTransferSizeEhh+0x30>
     e94:	28 f4       	brcc	.+10     	; 0xea0 <_ZN9nRF24L01P15setTransferSizeEhh+0x14>
     e96:	66 23       	and	r22, r22
     e98:	49 f0       	breq	.+18     	; 0xeac <_ZN9nRF24L01P15setTransferSizeEhh+0x20>
     e9a:	61 30       	cpi	r22, 0x01	; 1
     e9c:	59 f0       	breq	.+22     	; 0xeb4 <_ZN9nRF24L01P15setTransferSizeEhh+0x28>
     e9e:	1e c0       	rjmp	.+60     	; 0xedc <_ZN9nRF24L01P15setTransferSizeEhh+0x50>
     ea0:	64 30       	cpi	r22, 0x04	; 4
     ea2:	a1 f0       	breq	.+40     	; 0xecc <_ZN9nRF24L01P15setTransferSizeEhh+0x40>
     ea4:	78 f0       	brcs	.+30     	; 0xec4 <_ZN9nRF24L01P15setTransferSizeEhh+0x38>
     ea6:	65 30       	cpi	r22, 0x05	; 5
     ea8:	a9 f0       	breq	.+42     	; 0xed4 <_ZN9nRF24L01P15setTransferSizeEhh+0x48>
     eaa:	18 c0       	rjmp	.+48     	; 0xedc <_ZN9nRF24L01P15setTransferSizeEhh+0x50>
     eac:	61 e1       	ldi	r22, 0x11	; 17
     eae:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
     eb2:	08 95       	ret
     eb4:	62 e1       	ldi	r22, 0x12	; 18
     eb6:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
     eba:	08 95       	ret
     ebc:	63 e1       	ldi	r22, 0x13	; 19
     ebe:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
     ec2:	08 95       	ret
     ec4:	64 e1       	ldi	r22, 0x14	; 20
     ec6:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
     eca:	08 95       	ret
     ecc:	65 e1       	ldi	r22, 0x15	; 21
     ece:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
     ed2:	08 95       	ret
     ed4:	66 e1       	ldi	r22, 0x16	; 22
     ed6:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
     eda:	08 95       	ret
     edc:	89 ef       	ldi	r24, 0xF9	; 249
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <_ZN9nRF24L01P15setTransferSizeEhh+0x54>
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <_ZN9nRF24L01P15setTransferSizeEhh+0x5a>
     ee6:	00 00       	nop
     ee8:	08 95       	ret

00000eea <_ZN9nRF24L01P25disableAutoAcknowledgmentEv>:

void nRF24L01P::disableAutoAcknowledgment(void)
{
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	ec 01       	movw	r28, r24
	uint8_t old_reg = getRegister(REG_ADDRESS_EN_AA);
     ef0:	61 e0       	ldi	r22, 0x01	; 1
     ef2:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN9nRF24L01P11getRegisterEh>

	uint8_t new_reg = old_reg & _DISABLE_AUTO_ACKNOWLEDGE_ALL;

	setRegister(REG_ADDRESS_EN_AA, new_reg);
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	61 e0       	ldi	r22, 0x01	; 1
     efa:	ce 01       	movw	r24, r28
     efc:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <_ZN9nRF24L01P21disableAutoRetransmitEv>:

void nRF24L01P::disableAutoRetransmit(void)
{
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	ec 01       	movw	r28, r24
	uint8_t old_reg = getRegister(REG_ADDRESS_SETUP_RETR);
     f0c:	64 e0       	ldi	r22, 0x04	; 4
     f0e:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN9nRF24L01P11getRegisterEh>

	uint8_t new_reg = old_reg & _DISABLE_AUTO_RETRANSMIT_ALL;

	setRegister(REG_ADDRESS_SETUP_RETR, new_reg);
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	64 e0       	ldi	r22, 0x04	; 4
     f16:	ce 01       	movw	r24, r28
     f18:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
}
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	08 95       	ret

00000f22 <_ZN9nRF24L01P19setFrequencyChannelEj>:
	return (reg + MINIMUM_FREQUENCY_CHANNEL);
}

void nRF24L01P::setFrequencyChannel(uint16_t frequency)
{
	if(frequency < MINIMUM_FREQUENCY_CHANNEL || frequency > MAXIMUM_FREQUENCY_CHANNEL)
     f22:	ab 01       	movw	r20, r22
     f24:	40 56       	subi	r20, 0x60	; 96
     f26:	59 40       	sbci	r21, 0x09	; 9
     f28:	4e 37       	cpi	r20, 0x7E	; 126
     f2a:	51 05       	cpc	r21, r1
     f2c:	20 f4       	brcc	.+8      	; 0xf36 <_ZN9nRF24L01P19setFrequencyChannelEj+0x14>
	}
	else
	{
		frequency -= MINIMUM_FREQUENCY_CHANNEL;

		uint8_t rf_ch = frequency & _MASK_FREQUENCY_CHANNEL;
     f2e:	4f 77       	andi	r20, 0x7F	; 127

		setRegister(REG_ADDRESS_RF_CH, rf_ch);
     f30:	65 e0       	ldi	r22, 0x05	; 5
     f32:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
     f36:	08 95       	ret

00000f38 <_ZN9nRF24L01P14enableDataPipeEa>:
	}
}

void nRF24L01P::enableDataPipe(int8_t pipe)
{
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	ec 01       	movw	r28, r24
     f42:	06 2f       	mov	r16, r22
	uint8_t old_reg = getRegister(REG_ADDRESS_EN_RXADDR);
     f44:	62 e0       	ldi	r22, 0x02	; 2
     f46:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN9nRF24L01P11getRegisterEh>

	uint8_t new_reg = 0;

	switch(pipe)
     f4a:	00 2e       	mov	r0, r16
     f4c:	00 0c       	add	r0, r0
     f4e:	11 0b       	sbc	r17, r17
     f50:	22 0b       	sbc	r18, r18
     f52:	33 0b       	sbc	r19, r19
     f54:	f8 01       	movw	r30, r16
     f56:	31 96       	adiw	r30, 0x01	; 1
     f58:	e7 30       	cpi	r30, 0x07	; 7
     f5a:	f1 05       	cpc	r31, r1
     f5c:	c8 f4       	brcc	.+50     	; 0xf90 <_ZN9nRF24L01P14enableDataPipeEa+0x58>
     f5e:	ec 5c       	subi	r30, 0xCC	; 204
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__tablejump2__>
	{
		case DATA_PIPE_ALL:
		  new_reg = old_reg | _ENABLE_DATA_PIPE_ALL;
     f66:	48 2f       	mov	r20, r24
     f68:	4f 63       	ori	r20, 0x3F	; 63
		  break;
     f6a:	19 c0       	rjmp	.+50     	; 0xf9e <_ZN9nRF24L01P14enableDataPipeEa+0x66>

		case DATA_PIPE_0:
		  new_reg = old_reg | _ENABLE_DATA_PIPE_0;
     f6c:	48 2f       	mov	r20, r24
     f6e:	41 60       	ori	r20, 0x01	; 1
		  break;
     f70:	16 c0       	rjmp	.+44     	; 0xf9e <_ZN9nRF24L01P14enableDataPipeEa+0x66>

		case DATA_PIPE_1:
		  new_reg = old_reg | _ENABLE_DATA_PIPE_1;
     f72:	48 2f       	mov	r20, r24
     f74:	42 60       	ori	r20, 0x02	; 2
		  break;
     f76:	13 c0       	rjmp	.+38     	; 0xf9e <_ZN9nRF24L01P14enableDataPipeEa+0x66>

		case DATA_PIPE_2:
		  new_reg = old_reg | _ENABLE_DATA_PIPE_2;
     f78:	48 2f       	mov	r20, r24
     f7a:	44 60       	ori	r20, 0x04	; 4
		  break;
     f7c:	10 c0       	rjmp	.+32     	; 0xf9e <_ZN9nRF24L01P14enableDataPipeEa+0x66>

		case DATA_PIPE_3:
		  new_reg = old_reg | _ENABLE_DATA_PIPE_3;
     f7e:	48 2f       	mov	r20, r24
     f80:	48 60       	ori	r20, 0x08	; 8
		  break;
     f82:	0d c0       	rjmp	.+26     	; 0xf9e <_ZN9nRF24L01P14enableDataPipeEa+0x66>

		case DATA_PIPE_4:
		  new_reg = old_reg | _ENABLE_DATA_PIPE_4;
     f84:	48 2f       	mov	r20, r24
     f86:	40 61       	ori	r20, 0x10	; 16
		  break;
     f88:	0a c0       	rjmp	.+20     	; 0xf9e <_ZN9nRF24L01P14enableDataPipeEa+0x66>

		case DATA_PIPE_5:
		  new_reg = old_reg | _ENABLE_DATA_PIPE_5;
     f8a:	48 2f       	mov	r20, r24
     f8c:	40 62       	ori	r20, 0x20	; 32
		  break;
     f8e:	07 c0       	rjmp	.+14     	; 0xf9e <_ZN9nRF24L01P14enableDataPipeEa+0x66>
     f90:	89 ef       	ldi	r24, 0xF9	; 249
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <_ZN9nRF24L01P14enableDataPipeEa+0x5c>
     f98:	00 c0       	rjmp	.+0      	; 0xf9a <_ZN9nRF24L01P14enableDataPipeEa+0x62>
     f9a:	00 00       	nop

void nRF24L01P::enableDataPipe(int8_t pipe)
{
	uint8_t old_reg = getRegister(REG_ADDRESS_EN_RXADDR);

	uint8_t new_reg = 0;
     f9c:	40 e0       	ldi	r20, 0x00	; 0

		default:
		  //Invalid pipe number
		  _delay_ms(1);
	}
	setRegister(REG_ADDRESS_EN_RXADDR, new_reg);
     f9e:	62 e0       	ldi	r22, 0x02	; 2
     fa0:	ce 01       	movw	r24, r28
     fa2:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
}
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	08 95       	ret

00000fb0 <_ZN9nRF24L01P24setCyclicRedundancyCheckEh>:
		return -1;
	}
}

void nRF24L01P::setCyclicRedundancyCheck(uint8_t crc_length)
{
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	ec 01       	movw	r28, r24
     fba:	16 2f       	mov	r17, r22
	uint8_t old_reg = getRegister(REG_ADDRESS_CONFIG);
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN9nRF24L01P11getRegisterEh>

	old_reg &= _MASK_CYCLIC_REDUNDANCY_CHECK;
     fc2:	08 2f       	mov	r16, r24
     fc4:	0c 70       	andi	r16, 0x0C	; 12

	uint8_t new_reg = 0;
	
	//Register 01 has to be zero in order to turn the CRC off
	if(crc_length == CYCLIC_REDUNDANCY_CHECK_OFF)
     fc6:	11 11       	cpse	r17, r1
     fc8:	07 c0       	rjmp	.+14     	; 0xfd8 <_ZN9nRF24L01P24setCyclicRedundancyCheckEh+0x28>
	{
		uint8_t en_aa_reg = getRegister(REG_ADDRESS_EN_AA);
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	ce 01       	movw	r24, r28
     fce:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN9nRF24L01P11getRegisterEh>

		if(en_aa_reg == 0x00)
     fd2:	81 11       	cpse	r24, r1
     fd4:	10 c0       	rjmp	.+32     	; 0xff6 <_ZN9nRF24L01P24setCyclicRedundancyCheckEh+0x46>
     fd6:	12 c0       	rjmp	.+36     	; 0xffc <_ZN9nRF24L01P24setCyclicRedundancyCheckEh+0x4c>
			//nRF24L01P: Error, could not set CRC off
		}
	}
	else
	{
		switch(crc_length)
     fd8:	11 30       	cpi	r17, 0x01	; 1
     fda:	19 f0       	breq	.+6      	; 0xfe2 <_ZN9nRF24L01P24setCyclicRedundancyCheckEh+0x32>
     fdc:	12 30       	cpi	r17, 0x02	; 2
     fde:	69 f0       	breq	.+26     	; 0xffa <_ZN9nRF24L01P24setCyclicRedundancyCheckEh+0x4a>
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <_ZN9nRF24L01P24setCyclicRedundancyCheckEh+0x36>
		{
			case CYCLIC_REDUNDANCY_CHECK_1BYTE:
			new_reg = old_reg | _CYCLIC_REDUNDANCY_CHECK_1BYTE;
     fe2:	08 60       	ori	r16, 0x08	; 8
			break;
     fe4:	0b c0       	rjmp	.+22     	; 0xffc <_ZN9nRF24L01P24setCyclicRedundancyCheckEh+0x4c>
     fe6:	89 ef       	ldi	r24, 0xF9	; 249
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	f1 f7       	brne	.-4      	; 0xfea <_ZN9nRF24L01P24setCyclicRedundancyCheckEh+0x3a>
     fee:	00 c0       	rjmp	.+0      	; 0xff0 <_ZN9nRF24L01P24setCyclicRedundancyCheckEh+0x40>
     ff0:	00 00       	nop
{
	uint8_t old_reg = getRegister(REG_ADDRESS_CONFIG);

	old_reg &= _MASK_CYCLIC_REDUNDANCY_CHECK;

	uint8_t new_reg = 0;
     ff2:	00 e0       	ldi	r16, 0x00	; 0
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <_ZN9nRF24L01P24setCyclicRedundancyCheckEh+0x4c>
     ff6:	00 e0       	ldi	r16, 0x00	; 0
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <_ZN9nRF24L01P24setCyclicRedundancyCheckEh+0x4c>
			case CYCLIC_REDUNDANCY_CHECK_1BYTE:
			new_reg = old_reg | _CYCLIC_REDUNDANCY_CHECK_1BYTE;
			break;

			case CYCLIC_REDUNDANCY_CHECK_2BYTES:
			new_reg = old_reg | _CYCLIC_REDUNDANCY_CHECK_2BYTES;
     ffa:	0c e0       	ldi	r16, 0x0C	; 12
			default:
			//Something went wrong...
			_delay_ms(1);
		}
	}
	setRegister(REG_ADDRESS_CONFIG, new_reg);
     ffc:	40 2f       	mov	r20, r16
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	ce 01       	movw	r24, r28
    1002:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	08 95       	ret

00001010 <_ZN9nRF24L01P14setAirDataRateEj>:
		return -1;
	}
}

void nRF24L01P::setAirDataRate(uint16_t rate)
{
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	8c 01       	movw	r16, r24
    101a:	eb 01       	movw	r28, r22
	uint8_t old_reg = getRegister(REG_ADDRESS_RF_SETUP);
    101c:	66 e0       	ldi	r22, 0x06	; 6
    101e:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN9nRF24L01P11getRegisterEh>

	old_reg &= ~(_MASK_AIR_DATA_RATE);
    1022:	48 2f       	mov	r20, r24
    1024:	47 7d       	andi	r20, 0xD7	; 215

	uint8_t new_reg = 0;

	switch(rate)
    1026:	c8 3e       	cpi	r28, 0xE8	; 232
    1028:	83 e0       	ldi	r24, 0x03	; 3
    102a:	d8 07       	cpc	r29, r24
    102c:	91 f0       	breq	.+36     	; 0x1052 <_ZN9nRF24L01P14setAirDataRateEj+0x42>
    102e:	c0 3d       	cpi	r28, 0xD0	; 208
    1030:	97 e0       	ldi	r25, 0x07	; 7
    1032:	d9 07       	cpc	r29, r25
    1034:	29 f0       	breq	.+10     	; 0x1040 <_ZN9nRF24L01P14setAirDataRateEj+0x30>
    1036:	ca 3f       	cpi	r28, 0xFA	; 250
    1038:	d1 05       	cpc	r29, r1
    103a:	21 f4       	brne	.+8      	; 0x1044 <_ZN9nRF24L01P14setAirDataRateEj+0x34>
	{
		case AIR_DATA_RATE_250KBPS:
		new_reg = old_reg | _AIR_DATA_RATE_250KBPS;
    103c:	40 62       	ori	r20, 0x20	; 32
		break;
    103e:	09 c0       	rjmp	.+18     	; 0x1052 <_ZN9nRF24L01P14setAirDataRateEj+0x42>
		case AIR_DATA_RATE_1MBPS:
		new_reg = old_reg | _AIR_DATA_RATE_1MBPS;
		break;

		case AIR_DATA_RATE_2MBPS:
		new_reg = old_reg | _AIR_DATA_RATE_2MBPS;
    1040:	48 60       	ori	r20, 0x08	; 8
		break;
    1042:	07 c0       	rjmp	.+14     	; 0x1052 <_ZN9nRF24L01P14setAirDataRateEj+0x42>
    1044:	89 ef       	ldi	r24, 0xF9	; 249
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <_ZN9nRF24L01P14setAirDataRateEj+0x38>
    104c:	00 c0       	rjmp	.+0      	; 0x104e <_ZN9nRF24L01P14setAirDataRateEj+0x3e>
    104e:	00 00       	nop
{
	uint8_t old_reg = getRegister(REG_ADDRESS_RF_SETUP);

	old_reg &= ~(_MASK_AIR_DATA_RATE);

	uint8_t new_reg = 0;
    1050:	40 e0       	ldi	r20, 0x00	; 0

		default:
		//Something went wrong...
		_delay_ms(1);
	}
	setRegister(REG_ADDRESS_RF_SETUP, new_reg);
    1052:	66 e0       	ldi	r22, 0x06	; 6
    1054:	c8 01       	movw	r24, r16
    1056:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
}
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	08 95       	ret

00001064 <_ZN9nRF24L01P14setOutputPowerEa>:
		return -1;
	}
}

void nRF24L01P::setOutputPower(int8_t power)
{
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	8c 01       	movw	r16, r24
    106c:	c6 2f       	mov	r28, r22
	uint8_t old_reg = getRegister(REG_ADDRESS_RF_SETUP);
    106e:	66 e0       	ldi	r22, 0x06	; 6
    1070:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN9nRF24L01P11getRegisterEh>

	old_reg &= ~(_MASK_OUTPUT_POWER);
    1074:	48 2f       	mov	r20, r24
    1076:	49 7f       	andi	r20, 0xF9	; 249

	uint8_t new_reg = 0;

	switch(power)
    1078:	c4 3f       	cpi	r28, 0xF4	; 244
    107a:	61 f0       	breq	.+24     	; 0x1094 <_ZN9nRF24L01P14setOutputPowerEa+0x30>
    107c:	1c f4       	brge	.+6      	; 0x1084 <_ZN9nRF24L01P14setOutputPowerEa+0x20>
    107e:	ce 3e       	cpi	r28, 0xEE	; 238
    1080:	91 f0       	breq	.+36     	; 0x10a6 <_ZN9nRF24L01P14setOutputPowerEa+0x42>
    1082:	0a c0       	rjmp	.+20     	; 0x1098 <_ZN9nRF24L01P14setOutputPowerEa+0x34>
    1084:	ca 3f       	cpi	r28, 0xFA	; 250
    1086:	21 f0       	breq	.+8      	; 0x1090 <_ZN9nRF24L01P14setOutputPowerEa+0x2c>
    1088:	c1 11       	cpse	r28, r1
    108a:	06 c0       	rjmp	.+12     	; 0x1098 <_ZN9nRF24L01P14setOutputPowerEa+0x34>
	{
		case OUTPUT_POWER_0DBM:
		new_reg = old_reg | _OUTPUT_POWER_0DBM;
    108c:	46 60       	ori	r20, 0x06	; 6
		break;
    108e:	0b c0       	rjmp	.+22     	; 0x10a6 <_ZN9nRF24L01P14setOutputPowerEa+0x42>

		case OUTPUT_POWER_MINUS_6DBM:
		new_reg = old_reg | _OUTPUT_POWER_MINUS_6DBM;
    1090:	44 60       	ori	r20, 0x04	; 4
		break;
    1092:	09 c0       	rjmp	.+18     	; 0x10a6 <_ZN9nRF24L01P14setOutputPowerEa+0x42>

		case OUTPUT_POWER_MINUS_12DBM:
		new_reg = old_reg | _OUTPUT_POWER_MINUS_12DBM;
    1094:	42 60       	ori	r20, 0x02	; 2
		break;
    1096:	07 c0       	rjmp	.+14     	; 0x10a6 <_ZN9nRF24L01P14setOutputPowerEa+0x42>
    1098:	89 ef       	ldi	r24, 0xF9	; 249
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <_ZN9nRF24L01P14setOutputPowerEa+0x38>
    10a0:	00 c0       	rjmp	.+0      	; 0x10a2 <_ZN9nRF24L01P14setOutputPowerEa+0x3e>
    10a2:	00 00       	nop
{
	uint8_t old_reg = getRegister(REG_ADDRESS_RF_SETUP);

	old_reg &= ~(_MASK_OUTPUT_POWER);

	uint8_t new_reg = 0;
    10a4:	40 e0       	ldi	r20, 0x00	; 0

		default:
		//Something went wrong...
		_delay_ms(1);
	}
	setRegister(REG_ADDRESS_RF_SETUP, new_reg);
    10a6:	66 e0       	ldi	r22, 0x06	; 6
    10a8:	c8 01       	movw	r24, r16
    10aa:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
}
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	08 95       	ret

000010b6 <_ZN9nRF24L01P17getStatusRegisterEv>:
	_delay_us(4);
}

uint8_t nRF24L01P::getStatusRegister(void)
{
	PORTB &= ~(1<<SS);
    10b6:	2a 98       	cbi	0x05, 2	; 5
	
	uint8_t reg = my_spi.spi_send_char(NOP_CMD);
    10b8:	6f ef       	ldi	r22, 0xFF	; 255
    10ba:	02 96       	adiw	r24, 0x02	; 2
    10bc:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
	
	PORTB |= 1<<SS;
    10c0:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <_ZN9nRF24L01P17getStatusRegisterEv+0xe>
    10c4:	00 c0       	rjmp	.+0      	; 0x10c6 <_ZN9nRF24L01P17getStatusRegisterEv+0x10>

	_delay_us(4);

	return reg;
}
    10c6:	08 95       	ret

000010c8 <_ZN9nRF24L01P8flush_TXEv>:
	}
	setRegister(REG_ADDRESS_RF_SETUP, new_reg);
}

void nRF24L01P::flush_TX(void)
{
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	ec 01       	movw	r28, r24
	//Flush the TX FIFO buffer
	PORTB &= ~(1<<SS);
    10ce:	2a 98       	cbi	0x05, 2	; 5
	
	my_spi.spi_send_char(FLUSH_TX_FIFO_CMD);
    10d0:	61 ee       	ldi	r22, 0xE1	; 225
    10d2:	02 96       	adiw	r24, 0x02	; 2
    10d4:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
	
	PORTB |= 1<<SS;
    10d8:	2a 9a       	sbi	0x05, 2	; 5

	//Clear TX status bit
	uint8_t status_reg = getStatusRegister();
    10da:	ce 01       	movw	r24, r28
    10dc:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN9nRF24L01P17getStatusRegisterEv>
	
	uint8_t new_reg = status_reg | _MASK_TX_DATA_READY;
    10e0:	48 2f       	mov	r20, r24
    10e2:	40 62       	ori	r20, 0x20	; 32
	
	setRegister(REG_ADDRESS_STATUS, new_reg);
    10e4:	67 e0       	ldi	r22, 0x07	; 7
    10e6:	ce 01       	movw	r24, r28
    10e8:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>
}
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <_ZN9nRF24L01P9writeDataEPhh>:
  flush_TX();
  flush_RX();
}

void nRF24L01P::writeData(uint8_t *data, uint8_t data_size)
{
    10f2:	bf 92       	push	r11
    10f4:	cf 92       	push	r12
    10f6:	df 92       	push	r13
    10f8:	ef 92       	push	r14
    10fa:	ff 92       	push	r15
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	8c 01       	movw	r16, r24
    1106:	7b 01       	movw	r14, r22
    1108:	b4 2e       	mov	r11, r20
	if(data_size < 0 || data_size > 32)
	{
		//Invalid data size
	}
	
	PORTB &= ~(1<<CE);
    110a:	2e 98       	cbi	0x05, 6	; 5
	
	PORTB &= ~(1<<SS);
    110c:	2a 98       	cbi	0x05, 2	; 5

	my_spi.spi_send_char(WRITE_TX_PAYLOAD_CMD);
    110e:	6c 01       	movw	r12, r24
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	c8 0e       	add	r12, r24
    1114:	d1 1c       	adc	r13, r1
    1116:	60 ea       	ldi	r22, 0xA0	; 160
    1118:	c6 01       	movw	r24, r12
    111a:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>

	for(int i = 0; i < data_size; i++)
    111e:	bb 20       	and	r11, r11
    1120:	51 f0       	breq	.+20     	; 0x1136 <_ZN9nRF24L01P9writeDataEPhh+0x44>
    1122:	e7 01       	movw	r28, r14
    1124:	eb 0c       	add	r14, r11
    1126:	f1 1c       	adc	r15, r1
	{
		my_spi.spi_send_char(*data++);
    1128:	69 91       	ld	r22, Y+
    112a:	c6 01       	movw	r24, r12
    112c:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
	
	PORTB &= ~(1<<SS);

	my_spi.spi_send_char(WRITE_TX_PAYLOAD_CMD);

	for(int i = 0; i < data_size; i++)
    1130:	ce 15       	cp	r28, r14
    1132:	df 05       	cpc	r29, r15
    1134:	c9 f7       	brne	.-14     	; 0x1128 <_ZN9nRF24L01P9writeDataEPhh+0x36>
	{
		my_spi.spi_send_char(*data++);
	}
	PORTB |= 1<<SS;
    1136:	2a 9a       	sbi	0x05, 2	; 5
	
	setTransmitMode();
    1138:	c8 01       	movw	r24, r16
    113a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN9nRF24L01P15setTransmitModeEv>
	
	PORTB |= 1<<CE;
    113e:	2e 9a       	sbi	0x05, 6	; 5
    1140:	85 e0       	ldi	r24, 0x05	; 5
    1142:	8a 95       	dec	r24
    1144:	f1 f7       	brne	.-4      	; 0x1142 <_ZN9nRF24L01P9writeDataEPhh+0x50>

	_delay_us(15);

	PORTB &= ~(1<<CE);
    1146:	2e 98       	cbi	0x05, 6	; 5

	uint16_t cnt = 0;
	while(!( getStatusRegister() & _MASK_TX_DATA_READY) )
    1148:	c9 e3       	ldi	r28, 0x39	; 57
    114a:	d5 e0       	ldi	r29, 0x05	; 5
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <_ZN9nRF24L01P9writeDataEPhh+0x62>
    114e:	00 00       	nop
    1150:	21 97       	sbiw	r28, 0x01	; 1
	{
		//Wait for the transfer to complete
		_delay_us(1);
		cnt++;
		if(cnt >= 1337) break;
    1152:	29 f0       	breq	.+10     	; 0x115e <_ZN9nRF24L01P9writeDataEPhh+0x6c>
	_delay_us(15);

	PORTB &= ~(1<<CE);

	uint16_t cnt = 0;
	while(!( getStatusRegister() & _MASK_TX_DATA_READY) )
    1154:	c8 01       	movw	r24, r16
    1156:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN9nRF24L01P17getStatusRegisterEv>
    115a:	85 ff       	sbrs	r24, 5
    115c:	f8 cf       	rjmp	.-16     	; 0x114e <_ZN9nRF24L01P9writeDataEPhh+0x5c>
		//Wait for the transfer to complete
		_delay_us(1);
		cnt++;
		if(cnt >= 1337) break;
	}
	flush_TX();
    115e:	c8 01       	movw	r24, r16
    1160:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN9nRF24L01P8flush_TXEv>
}
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	bf 90       	pop	r11
    1176:	08 95       	ret

00001178 <_ZN9nRF24L01P8flush_RXEv>:
	
	setRegister(REG_ADDRESS_STATUS, new_reg);
}

void nRF24L01P::flush_RX(void)
{
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	ec 01       	movw	r28, r24
	//Clear RX status bit
	uint8_t status_reg = getStatusRegister();
    117e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN9nRF24L01P17getStatusRegisterEv>
	
	uint8_t new_reg = status_reg | _MASK_RX_DATA_READY;
    1182:	48 2f       	mov	r20, r24
    1184:	40 64       	ori	r20, 0x40	; 64
	
	setRegister(REG_ADDRESS_STATUS, new_reg);
    1186:	67 e0       	ldi	r22, 0x07	; 7
    1188:	ce 01       	movw	r24, r28
    118a:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>

	//Flush the RX FIFO buffer
	PORTB &= ~(1<<SS);
    118e:	2a 98       	cbi	0x05, 2	; 5
	
	my_spi.spi_send_char(FLUSH_RX_FIFO_CMD);
    1190:	62 ee       	ldi	r22, 0xE2	; 226
    1192:	ce 01       	movw	r24, r28
    1194:	02 96       	adiw	r24, 0x02	; 2
    1196:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
	
	PORTB |= 1<<SS;
    119a:	2a 9a       	sbi	0x05, 2	; 5
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <_ZN9nRF24L01PC1Ev>:
#define _MASK_POWER_MODE                 0x02
#define _MASK_RX_TX_CONTROL              0x01
#define _MASK_ENABLE_DPL                 0x04


nRF24L01P::nRF24L01P(void)
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11a8:	87 ea       	ldi	r24, 0xA7	; 167
    11aa:	91 e6       	ldi	r25, 0x61	; 97
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <_ZN9nRF24L01PC1Ev+0xa>
    11b0:	00 c0       	rjmp	.+0      	; 0x11b2 <_ZN9nRF24L01PC1Ev+0x10>
    11b2:	00 00       	nop
{
  /* Give the nrf time to startup */
  _delay_ms(100);

  my_spi.spi_init();
    11b4:	ce 01       	movw	r24, r28
    11b6:	02 96       	adiw	r24, 0x02	; 2
    11b8:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN3spi8spi_initEv>
  
  /* Assign -1 value to the variables
  since the status is unknown at this moment */
  pwr_up  = -1;
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	88 83       	st	Y, r24
  prim_rx = -1;
    11c0:	89 83       	std	Y+1, r24	; 0x01

  flush_TX();
    11c2:	ce 01       	movw	r24, r28
    11c4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN9nRF24L01P8flush_TXEv>
  flush_RX();
    11c8:	ce 01       	movw	r24, r28
    11ca:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN9nRF24L01P8flush_RXEv>
}
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	08 95       	ret

000011d4 <_ZN9nRF24L01P8readDataEPhh>:
}



int8_t nRF24L01P::readData(uint8_t *data, uint8_t data_size)
{
    11d4:	af 92       	push	r10
    11d6:	bf 92       	push	r11
    11d8:	cf 92       	push	r12
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
	if(data_size < 0 || data_size > 32)
    11e8:	41 32       	cpi	r20, 0x21	; 33
    11ea:	90 f5       	brcc	.+100    	; 0x1250 <_ZN9nRF24L01P8readDataEPhh+0x7c>
    11ec:	c4 2e       	mov	r12, r20
    11ee:	8b 01       	movw	r16, r22
    11f0:	5c 01       	movw	r10, r24
		//Invalid data size
		return -1;
	}

	//Read the length of the payload
	PORTB &= ~(1<<SS);
    11f2:	2a 98       	cbi	0x05, 2	; 5

	my_spi.spi_send_char(READ_RX_PAYLOAD_WIDTH_CMD);
    11f4:	7c 01       	movw	r14, r24
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	e8 0e       	add	r14, r24
    11fa:	f1 1c       	adc	r15, r1
    11fc:	60 e6       	ldi	r22, 0x60	; 96
    11fe:	c7 01       	movw	r24, r14
    1200:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>

	int8_t rxPayloadWidth = my_spi.spi_send_char(NOP_CMD);
    1204:	6f ef       	ldi	r22, 0xFF	; 255
    1206:	c7 01       	movw	r24, r14
    1208:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
    120c:	d8 2e       	mov	r13, r24

	PORTB |= 1<<SS;
    120e:	2a 9a       	sbi	0x05, 2	; 5

	if(rxPayloadWidth < 0 || rxPayloadWidth > 32)
    1210:	80 e2       	ldi	r24, 0x20	; 32
    1212:	8d 15       	cp	r24, r13
    1214:	f8 f0       	brcs	.+62     	; 0x1254 <_ZN9nRF24L01P8readDataEPhh+0x80>
	{
		return -1;
	}
	else if(rxPayloadWidth == 0)
    1216:	dd 20       	and	r13, r13
    1218:	f9 f0       	breq	.+62     	; 0x1258 <_ZN9nRF24L01P8readDataEPhh+0x84>
		return 0;
	}
	else
	{
		//Read the payload
		PORTB &= ~(1<<SS);
    121a:	2a 98       	cbi	0x05, 2	; 5

		my_spi.spi_send_char(READ_RX_PAYLOAD_CMD);
    121c:	61 e6       	ldi	r22, 0x61	; 97
    121e:	c7 01       	movw	r24, r14
    1220:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>

		for(int i = 0; i < data_size; i++)
    1224:	cc 20       	and	r12, r12
    1226:	59 f0       	breq	.+22     	; 0x123e <_ZN9nRF24L01P8readDataEPhh+0x6a>
    1228:	e8 01       	movw	r28, r16
    122a:	0c 0d       	add	r16, r12
    122c:	11 1d       	adc	r17, r1
		{
			*data++ = my_spi.spi_send_char(NOP_CMD);
    122e:	6f ef       	ldi	r22, 0xFF	; 255
    1230:	c7 01       	movw	r24, r14
    1232:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN3spi13spi_send_charEc>
    1236:	89 93       	st	Y+, r24
		//Read the payload
		PORTB &= ~(1<<SS);

		my_spi.spi_send_char(READ_RX_PAYLOAD_CMD);

		for(int i = 0; i < data_size; i++)
    1238:	c0 17       	cp	r28, r16
    123a:	d1 07       	cpc	r29, r17
    123c:	c1 f7       	brne	.-16     	; 0x122e <_ZN9nRF24L01P8readDataEPhh+0x5a>
		{
			*data++ = my_spi.spi_send_char(NOP_CMD);
		}
		PORTB |= 1<<SS;
    123e:	2a 9a       	sbi	0x05, 2	; 5

		flush_RX();
    1240:	c5 01       	movw	r24, r10
    1242:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN9nRF24L01P8flush_RXEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1246:	82 e3       	ldi	r24, 0x32	; 50
    1248:	8a 95       	dec	r24
    124a:	f1 f7       	brne	.-4      	; 0x1248 <_ZN9nRF24L01P8readDataEPhh+0x74>
		
		_delay_us(150);
		
		return rxPayloadWidth;
    124c:	8d 2d       	mov	r24, r13
    124e:	05 c0       	rjmp	.+10     	; 0x125a <_ZN9nRF24L01P8readDataEPhh+0x86>
int8_t nRF24L01P::readData(uint8_t *data, uint8_t data_size)
{
	if(data_size < 0 || data_size > 32)
	{
		//Invalid data size
		return -1;
    1250:	8f ef       	ldi	r24, 0xFF	; 255
    1252:	03 c0       	rjmp	.+6      	; 0x125a <_ZN9nRF24L01P8readDataEPhh+0x86>

	PORTB |= 1<<SS;

	if(rxPayloadWidth < 0 || rxPayloadWidth > 32)
	{
		return -1;
    1254:	8f ef       	ldi	r24, 0xFF	; 255
    1256:	01 c0       	rjmp	.+2      	; 0x125a <_ZN9nRF24L01P8readDataEPhh+0x86>
	}
	else if(rxPayloadWidth == 0)
	{
		return 0;
    1258:	80 e0       	ldi	r24, 0x00	; 0
		
		_delay_us(150);
		
		return rxPayloadWidth;
	}
}
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	ff 90       	pop	r15
    1264:	ef 90       	pop	r14
    1266:	df 90       	pop	r13
    1268:	cf 90       	pop	r12
    126a:	bf 90       	pop	r11
    126c:	af 90       	pop	r10
    126e:	08 95       	ret

00001270 <_ZN9nRF24L01P14setReceiveModeEv>:
		return false;
	}
}

void nRF24L01P::setReceiveMode(void)
{
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	ec 01       	movw	r28, r24
	if(pwr_up != 1) powerUp();
    1276:	88 81       	ld	r24, Y
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	19 f0       	breq	.+6      	; 0x1282 <_ZN9nRF24L01P14setReceiveModeEv+0x12>
    127c:	ce 01       	movw	r24, r28
    127e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN9nRF24L01P7powerUpEv>
	
	if(prim_rx != 1)
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	a1 f0       	breq	.+40     	; 0x12b0 <_ZN9nRF24L01P14setReceiveModeEv+0x40>
	{
		uint8_t old_reg = getRegister(REG_ADDRESS_CONFIG);
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	ce 01       	movw	r24, r28
    128c:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN9nRF24L01P11getRegisterEh>

		uint8_t new_reg = old_reg | _MASK_RX_TX_CONTROL;
    1290:	48 2f       	mov	r20, r24
    1292:	41 60       	ori	r20, 0x01	; 1

		setRegister(REG_ADDRESS_CONFIG, new_reg);
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	ce 01       	movw	r24, r28
    1298:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN9nRF24L01P11setRegisterEhh>

		flush_RX();
    129c:	ce 01       	movw	r24, r28
    129e:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN9nRF24L01P8flush_RXEv>
		
		PORTB |= 1<<CE;
    12a2:	2e 9a       	sbi	0x05, 6	; 5
    12a4:	8b e2       	ldi	r24, 0x2B	; 43
    12a6:	8a 95       	dec	r24
    12a8:	f1 f7       	brne	.-4      	; 0x12a6 <_ZN9nRF24L01P14setReceiveModeEv+0x36>
    12aa:	00 00       	nop

		_delay_us(130);

		prim_rx = 1;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
	}
}
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	08 95       	ret

000012b6 <_ZN9nRF24L01P8readableEv>:
		return rxPayloadWidth;
	}
}

bool nRF24L01P::readable(void)
{	
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	ec 01       	movw	r28, r24
	if(prim_rx != 1) setReceiveMode();
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	19 f0       	breq	.+6      	; 0x12c8 <_ZN9nRF24L01P8readableEv+0x12>
    12c2:	ce 01       	movw	r24, r28
    12c4:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN9nRF24L01P14setReceiveModeEv>

	uint8_t status_reg = getStatusRegister();
    12c8:	ce 01       	movw	r24, r28
    12ca:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN9nRF24L01P17getStatusRegisterEv>
	}
	else
	{
		return false;
	}
}
    12ce:	86 fb       	bst	r24, 6
    12d0:	88 27       	eor	r24, r24
    12d2:	80 f9       	bld	r24, 0
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	08 95       	ret

000012da <_Z13onewire_reseth>:
#include "OneWire.h"

uint8_t onewire_reset(uint8_t TEMPERATURE_PIN)
{		
	//Set the One Wire pin as an output
	DDRD |= 1<<TEMPERATURE_PIN;
    12da:	9a b1       	in	r25, 0x0a	; 10
    12dc:	21 e0       	ldi	r18, 0x01	; 1
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	08 2e       	mov	r0, r24
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <_Z13onewire_reseth+0xe>
    12e4:	22 0f       	add	r18, r18
    12e6:	33 1f       	adc	r19, r19
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <_Z13onewire_reseth+0xa>
    12ec:	92 2b       	or	r25, r18
    12ee:	9a b9       	out	0x0a, r25	; 10

	//Set the output low for 480us - 960us
	PORTD &= ~(1<<TEMPERATURE_PIN);
    12f0:	4b b1       	in	r20, 0x0b	; 11
    12f2:	52 2f       	mov	r21, r18
    12f4:	50 95       	com	r21
    12f6:	45 23       	and	r20, r21
    12f8:	4b b9       	out	0x0b, r20	; 11
    12fa:	60 ef       	ldi	r22, 0xF0	; 240
    12fc:	6a 95       	dec	r22
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <_Z13onewire_reseth+0x22>
	_delay_us(720);

	//Set the One wire pin as an input and wait for a response (60us - 240us)
	DDRD &= ~(1<<TEMPERATURE_PIN);
    1300:	9a b1       	in	r25, 0x0a	; 10
    1302:	95 23       	and	r25, r21
    1304:	9a b9       	out	0x0a, r25	; 10
    1306:	74 e1       	ldi	r23, 0x14	; 20
    1308:	7a 95       	dec	r23
    130a:	f1 f7       	brne	.-4      	; 0x1308 <_Z13onewire_reseth+0x2e>
	_delay_us(60);

	//The sensor pulls the line low
	if(PIND & (1<<TEMPERATURE_PIN)) return 0;
    130c:	49 b1       	in	r20, 0x09	; 9
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	ba 01       	movw	r22, r20
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <_Z13onewire_reseth+0x3e>
    1314:	75 95       	asr	r23
    1316:	67 95       	ror	r22
    1318:	8a 95       	dec	r24
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <_Z13onewire_reseth+0x3a>
    131c:	60 fd       	sbrc	r22, 0
    131e:	10 c0       	rjmp	.+32     	; 0x1340 <_Z13onewire_reseth+0x66>

	//Set counter prescaler to clk/1
	TCCR0B |= 1<<CS00;
    1320:	85 b5       	in	r24, 0x25	; 37
    1322:	81 60       	ori	r24, 0x01	; 1
    1324:	85 bd       	out	0x25, r24	; 37

	//Start counting from 0...
	TCNT0 = 0;
    1326:	16 bc       	out	0x26, r1	; 38
	
	//Wait for the sensor to pull the line high
	while(!(PIND & 1<<TEMPERATURE_PIN))
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <_Z13onewire_reseth+0x56>
	{
		if(TCNT0 >= 250) return 0;
    132a:	86 b5       	in	r24, 0x26	; 38
    132c:	8a 3f       	cpi	r24, 0xFA	; 250
    132e:	50 f4       	brcc	.+20     	; 0x1344 <_Z13onewire_reseth+0x6a>

	//Start counting from 0...
	TCNT0 = 0;
	
	//Wait for the sensor to pull the line high
	while(!(PIND & 1<<TEMPERATURE_PIN))
    1330:	89 b1       	in	r24, 0x09	; 9
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	82 23       	and	r24, r18
    1336:	93 23       	and	r25, r19
    1338:	89 2b       	or	r24, r25
    133a:	b9 f3       	breq	.-18     	; 0x132a <_Z13onewire_reseth+0x50>
	{
		if(TCNT0 >= 250) return 0;
	}
	return 1;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	08 95       	ret
	//Set the One wire pin as an input and wait for a response (60us - 240us)
	DDRD &= ~(1<<TEMPERATURE_PIN);
	_delay_us(60);

	//The sensor pulls the line low
	if(PIND & (1<<TEMPERATURE_PIN)) return 0;
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	08 95       	ret
	TCNT0 = 0;
	
	//Wait for the sensor to pull the line high
	while(!(PIND & 1<<TEMPERATURE_PIN))
	{
		if(TCNT0 >= 250) return 0;
    1344:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 1;
}
    1346:	08 95       	ret

00001348 <_Z13onewire_writehh>:
	{
		//Write a logic '1'
		if((command & (1<<i)) != 0)
		{
			//Set the one wire pin as an output
			DDRD |= 1<<TEMPERATURE_PIN;
    1348:	21 e0       	ldi	r18, 0x01	; 1
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <_Z13onewire_writehh+0xa>
    134e:	22 0f       	add	r18, r18
    1350:	33 1f       	adc	r19, r19
    1352:	6a 95       	dec	r22
    1354:	e2 f7       	brpl	.-8      	; 0x134e <_Z13onewire_writehh+0x6>
    1356:	e2 2f       	mov	r30, r18

			//Set the output low for ~1us
			PORTD &= ~(1<<TEMPERATURE_PIN);
    1358:	92 2f       	mov	r25, r18
    135a:	90 95       	com	r25

void onewire_write(uint8_t command, uint8_t TEMPERATURE_PIN)
{	
	uint8_t AMOUNT_OF_BITS = 8;

	for(int i = 0; i < AMOUNT_OF_BITS; i++)
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
	{
		//Write a logic '1'
		if((command & (1<<i)) != 0)
    1360:	68 2f       	mov	r22, r24
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	ab 01       	movw	r20, r22
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <_Z13onewire_writehh+0x26>
    136a:	55 95       	asr	r21
    136c:	47 95       	ror	r20
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <_Z13onewire_writehh+0x22>
    1372:	40 ff       	sbrs	r20, 0
    1374:	0f c0       	rjmp	.+30     	; 0x1394 <_Z13onewire_writehh+0x4c>
		{
			//Set the one wire pin as an output
			DDRD |= 1<<TEMPERATURE_PIN;
    1376:	4a b1       	in	r20, 0x0a	; 10
    1378:	4e 2b       	or	r20, r30
    137a:	4a b9       	out	0x0a, r20	; 10

			//Set the output low for ~1us
			PORTD &= ~(1<<TEMPERATURE_PIN);
    137c:	4b b1       	in	r20, 0x0b	; 11
    137e:	49 23       	and	r20, r25
    1380:	4b b9       	out	0x0b, r20	; 11
    1382:	00 00       	nop
			_delay_us(1);

			//Set the one wire pin as an input to drive the line high again,
			//the sensor will read this as a '1'
			DDRD &= ~(1<<TEMPERATURE_PIN);
    1384:	4a b1       	in	r20, 0x0a	; 10
    1386:	49 23       	and	r20, r25
    1388:	4a b9       	out	0x0a, r20	; 10
    138a:	83 e1       	ldi	r24, 0x13	; 19
    138c:	8a 95       	dec	r24
    138e:	f1 f7       	brne	.-4      	; 0x138c <_Z13onewire_writehh+0x44>
    1390:	00 c0       	rjmp	.+0      	; 0x1392 <_Z13onewire_writehh+0x4a>
    1392:	0e c0       	rjmp	.+28     	; 0x13b0 <_Z13onewire_writehh+0x68>
		
		//Write a logic '0'
		else
		{
			//Set the one wire pin as an output
			DDRD |= 1<<TEMPERATURE_PIN;
    1394:	4a b1       	in	r20, 0x0a	; 10
    1396:	4e 2b       	or	r20, r30
    1398:	4a b9       	out	0x0a, r20	; 10

			//Set the output low for 15us - 60us,
			//the sensor will read this as a '0'
			PORTD &= ~(1<<TEMPERATURE_PIN);
    139a:	4b b1       	in	r20, 0x0b	; 11
    139c:	49 23       	and	r20, r25
    139e:	4b b9       	out	0x0b, r20	; 11
    13a0:	83 e1       	ldi	r24, 0x13	; 19
    13a2:	8a 95       	dec	r24
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <_Z13onewire_writehh+0x5a>
    13a6:	00 c0       	rjmp	.+0      	; 0x13a8 <_Z13onewire_writehh+0x60>
			_delay_us(59);

			//Set the one wire pin as an input
			DDRD &= ~(1<<TEMPERATURE_PIN);
    13a8:	4a b1       	in	r20, 0x0a	; 10
    13aa:	49 23       	and	r20, r25
    13ac:	4a b9       	out	0x0a, r20	; 10
    13ae:	00 00       	nop

void onewire_write(uint8_t command, uint8_t TEMPERATURE_PIN)
{	
	uint8_t AMOUNT_OF_BITS = 8;

	for(int i = 0; i < AMOUNT_OF_BITS; i++)
    13b0:	2f 5f       	subi	r18, 0xFF	; 255
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	28 30       	cpi	r18, 0x08	; 8
    13b6:	31 05       	cpc	r19, r1
    13b8:	a9 f6       	brne	.-86     	; 0x1364 <_Z13onewire_writehh+0x1c>
			//Set the one wire pin as an input
			DDRD &= ~(1<<TEMPERATURE_PIN);
			_delay_us(1);
		}
	}
}
    13ba:	08 95       	ret

000013bc <_Z12onewire_readh>:
	uint8_t AMOUNT_OF_BITS = 8;

	for(int i = 0; i < AMOUNT_OF_BITS; i++)
	{
		//Set the one wire pin as an output
		DDRD |= 1<<TEMPERATURE_PIN;
    13bc:	e1 e0       	ldi	r30, 0x01	; 1
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <_Z12onewire_readh+0xa>
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	8a 95       	dec	r24
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <_Z12onewire_readh+0x6>
    13ca:	7e 2f       	mov	r23, r30

		//Set the output low for ~1us
		PORTD &= ~(1<<TEMPERATURE_PIN);
    13cc:	6e 2f       	mov	r22, r30
    13ce:	60 95       	com	r22
{	
	uint8_t value = 0;

	uint8_t AMOUNT_OF_BITS = 8;

	for(int i = 0; i < AMOUNT_OF_BITS; i++)
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	50 e0       	ldi	r21, 0x00	; 0
	}
}

uint8_t onewire_read(uint8_t TEMPERATURE_PIN)
{	
	uint8_t value = 0;
    13d4:	80 e0       	ldi	r24, 0x00	; 0

		//If the line is high, the bit represents a logic '1',
		//if the line is low, the bit represents a logic '0'
		if( (PIND & 1<<TEMPERATURE_PIN))
		{
			value += (1<<i);
    13d6:	a1 e0       	ldi	r26, 0x01	; 1
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t AMOUNT_OF_BITS = 8;

	for(int i = 0; i < AMOUNT_OF_BITS; i++)
	{
		//Set the one wire pin as an output
		DDRD |= 1<<TEMPERATURE_PIN;
    13da:	9a b1       	in	r25, 0x0a	; 10
    13dc:	97 2b       	or	r25, r23
    13de:	9a b9       	out	0x0a, r25	; 10

		//Set the output low for ~1us
		PORTD &= ~(1<<TEMPERATURE_PIN);
    13e0:	9b b1       	in	r25, 0x0b	; 11
    13e2:	96 23       	and	r25, r22
    13e4:	9b b9       	out	0x0b, r25	; 11
    13e6:	00 00       	nop
		_delay_us(1);

		//Set the one wire pin as an input for 1us - 15us
		DDRD &= ~(1<<TEMPERATURE_PIN);
    13e8:	9a b1       	in	r25, 0x0a	; 10
    13ea:	96 23       	and	r25, r22
    13ec:	9a b9       	out	0x0a, r25	; 10
    13ee:	93 e0       	ldi	r25, 0x03	; 3
    13f0:	9a 95       	dec	r25
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <_Z12onewire_readh+0x34>
		_delay_us(9);

		//If the line is high, the bit represents a logic '1',
		//if the line is low, the bit represents a logic '0'
		if( (PIND & 1<<TEMPERATURE_PIN))
    13f4:	29 b1       	in	r18, 0x09	; 9
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	2e 23       	and	r18, r30
    13fa:	3f 23       	and	r19, r31
    13fc:	23 2b       	or	r18, r19
    13fe:	41 f0       	breq	.+16     	; 0x1410 <_Z12onewire_readh+0x54>
		{
			value += (1<<i);
    1400:	9d 01       	movw	r18, r26
    1402:	04 2e       	mov	r0, r20
    1404:	02 c0       	rjmp	.+4      	; 0x140a <_Z12onewire_readh+0x4e>
    1406:	22 0f       	add	r18, r18
    1408:	33 1f       	adc	r19, r19
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <_Z12onewire_readh+0x4a>
    140e:	82 0f       	add	r24, r18
    1410:	90 e1       	ldi	r25, 0x10	; 16
    1412:	9a 95       	dec	r25
    1414:	f1 f7       	brne	.-4      	; 0x1412 <_Z12onewire_readh+0x56>
    1416:	00 c0       	rjmp	.+0      	; 0x1418 <_Z12onewire_readh+0x5c>
{	
	uint8_t value = 0;

	uint8_t AMOUNT_OF_BITS = 8;

	for(int i = 0; i < AMOUNT_OF_BITS; i++)
    1418:	4f 5f       	subi	r20, 0xFF	; 255
    141a:	5f 4f       	sbci	r21, 0xFF	; 255
    141c:	48 30       	cpi	r20, 0x08	; 8
    141e:	51 05       	cpc	r21, r1
    1420:	e1 f6       	brne	.-72     	; 0x13da <_Z12onewire_readh+0x1e>
		}
		//One timeslot takes around 60us, so we wait for the next one
		_delay_us(50);
	}
	return value;
}
    1422:	08 95       	ret

00001424 <_Z27onewire_wait_for_conversionh>:
uint8_t onewire_wait_for_conversion(uint8_t TEMPERATURE_PIN)
{
	uint8_t value = 0;


	DDRD |= 1<<TEMPERATURE_PIN;
    1424:	9a b1       	in	r25, 0x0a	; 10
    1426:	21 e0       	ldi	r18, 0x01	; 1
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	08 2e       	mov	r0, r24
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <_Z27onewire_wait_for_conversionh+0xe>
    142e:	22 0f       	add	r18, r18
    1430:	33 1f       	adc	r19, r19
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <_Z27onewire_wait_for_conversionh+0xa>
    1436:	92 2b       	or	r25, r18
    1438:	9a b9       	out	0x0a, r25	; 10
	PORTD &= ~(1<<TEMPERATURE_PIN);
    143a:	9b b1       	in	r25, 0x0b	; 11
    143c:	20 95       	com	r18
    143e:	92 23       	and	r25, r18
    1440:	9b b9       	out	0x0b, r25	; 11
    1442:	00 00       	nop
	_delay_us(1);

	DDRD &= ~(1<<TEMPERATURE_PIN);
    1444:	9a b1       	in	r25, 0x0a	; 10
    1446:	29 23       	and	r18, r25
    1448:	2a b9       	out	0x0a, r18	; 10
    144a:	43 e0       	ldi	r20, 0x03	; 3
    144c:	4a 95       	dec	r20
    144e:	f1 f7       	brne	.-4      	; 0x144c <_Z27onewire_wait_for_conversionh+0x28>
	_delay_us(9);

	if( (PIND & (1<<TEMPERATURE_PIN)) != 0)
    1450:	29 b1       	in	r18, 0x09	; 9
    1452:	50 e1       	ldi	r21, 0x10	; 16
    1454:	5a 95       	dec	r21
    1456:	f1 f7       	brne	.-4      	; 0x1454 <_Z27onewire_wait_for_conversionh+0x30>
    1458:	00 c0       	rjmp	.+0      	; 0x145a <_Z27onewire_wait_for_conversionh+0x36>
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	a9 01       	movw	r20, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <_Z27onewire_wait_for_conversionh+0x40>
    1460:	55 95       	asr	r21
    1462:	47 95       	ror	r20
    1464:	8a 95       	dec	r24
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <_Z27onewire_wait_for_conversionh+0x3c>
    1468:	ca 01       	movw	r24, r20
		value = 1;
	}
	_delay_us(50);

	return value;
    146a:	81 70       	andi	r24, 0x01	; 1
    146c:	08 95       	ret

0000146e <_ZN3spi8spi_initEv>:
#include "spi.h"

void spi::spi_init(void)
{
	/* Set MOSI, SCK, SlaveSelect and CE as Output */
	DDRB |= (1<<MOSI | 1<<SCK | 1<<SS | 1<<CE);
    146e:	84 b1       	in	r24, 0x04	; 4
    1470:	8c 66       	ori	r24, 0x6C	; 108
    1472:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Set as Master */
	SPCR |= (1<<SPE | 1<<MSTR);
    1474:	8c b5       	in	r24, 0x2c	; 44
    1476:	80 65       	ori	r24, 0x50	; 80
    1478:	8c bd       	out	0x2c, r24	; 44

	/* Set Slave Select high */
	PORTB |= 1<<SS;
    147a:	2a 9a       	sbi	0x05, 2	; 5
    147c:	08 95       	ret

0000147e <_ZN3spi13spi_send_charEc>:
}

char spi::spi_send_char(char data)
{
	/* Load data into the buffer */
	SPDR = data;
    147e:	6e bd       	out	0x2e, r22	; 46
	
	/* Wait until transmission complete */
	while(!(SPSR & (1<<SPIF) ));
    1480:	0d b4       	in	r0, 0x2d	; 45
    1482:	07 fe       	sbrs	r0, 7
    1484:	fd cf       	rjmp	.-6      	; 0x1480 <_ZN3spi13spi_send_charEc+0x2>

	return(SPDR);
    1486:	8e b5       	in	r24, 0x2e	; 46
    1488:	08 95       	ret

0000148a <__tablejump2__>:
    148a:	ee 0f       	add	r30, r30
    148c:	ff 1f       	adc	r31, r31
    148e:	05 90       	lpm	r0, Z+
    1490:	f4 91       	lpm	r31, Z
    1492:	e0 2d       	mov	r30, r0
    1494:	09 94       	ijmp

00001496 <__ashrdi3>:
    1496:	97 fb       	bst	r25, 7
    1498:	10 f8       	bld	r1, 0

0000149a <__lshrdi3>:
    149a:	16 94       	lsr	r1
    149c:	00 08       	sbc	r0, r0
    149e:	0f 93       	push	r16
    14a0:	08 30       	cpi	r16, 0x08	; 8
    14a2:	98 f0       	brcs	.+38     	; 0x14ca <__lshrdi3+0x30>
    14a4:	08 50       	subi	r16, 0x08	; 8
    14a6:	23 2f       	mov	r18, r19
    14a8:	34 2f       	mov	r19, r20
    14aa:	45 2f       	mov	r20, r21
    14ac:	56 2f       	mov	r21, r22
    14ae:	67 2f       	mov	r22, r23
    14b0:	78 2f       	mov	r23, r24
    14b2:	89 2f       	mov	r24, r25
    14b4:	90 2d       	mov	r25, r0
    14b6:	f4 cf       	rjmp	.-24     	; 0x14a0 <__lshrdi3+0x6>
    14b8:	05 94       	asr	r0
    14ba:	97 95       	ror	r25
    14bc:	87 95       	ror	r24
    14be:	77 95       	ror	r23
    14c0:	67 95       	ror	r22
    14c2:	57 95       	ror	r21
    14c4:	47 95       	ror	r20
    14c6:	37 95       	ror	r19
    14c8:	27 95       	ror	r18
    14ca:	0a 95       	dec	r16
    14cc:	aa f7       	brpl	.-22     	; 0x14b8 <__lshrdi3+0x1e>
    14ce:	0f 91       	pop	r16
    14d0:	08 95       	ret

000014d2 <atoi>:
    14d2:	fc 01       	movw	r30, r24
    14d4:	88 27       	eor	r24, r24
    14d6:	99 27       	eor	r25, r25
    14d8:	e8 94       	clt
    14da:	21 91       	ld	r18, Z+
    14dc:	20 32       	cpi	r18, 0x20	; 32
    14de:	e9 f3       	breq	.-6      	; 0x14da <atoi+0x8>
    14e0:	29 30       	cpi	r18, 0x09	; 9
    14e2:	10 f0       	brcs	.+4      	; 0x14e8 <atoi+0x16>
    14e4:	2e 30       	cpi	r18, 0x0E	; 14
    14e6:	c8 f3       	brcs	.-14     	; 0x14da <atoi+0x8>
    14e8:	2b 32       	cpi	r18, 0x2B	; 43
    14ea:	41 f0       	breq	.+16     	; 0x14fc <atoi+0x2a>
    14ec:	2d 32       	cpi	r18, 0x2D	; 45
    14ee:	39 f4       	brne	.+14     	; 0x14fe <atoi+0x2c>
    14f0:	68 94       	set
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <atoi+0x2a>
    14f4:	0e 94 87 0a 	call	0x150e	; 0x150e <__mulhi_const_10>
    14f8:	82 0f       	add	r24, r18
    14fa:	91 1d       	adc	r25, r1
    14fc:	21 91       	ld	r18, Z+
    14fe:	20 53       	subi	r18, 0x30	; 48
    1500:	2a 30       	cpi	r18, 0x0A	; 10
    1502:	c0 f3       	brcs	.-16     	; 0x14f4 <atoi+0x22>
    1504:	1e f4       	brtc	.+6      	; 0x150c <atoi+0x3a>
    1506:	90 95       	com	r25
    1508:	81 95       	neg	r24
    150a:	9f 4f       	sbci	r25, 0xFF	; 255
    150c:	08 95       	ret

0000150e <__mulhi_const_10>:
    150e:	7a e0       	ldi	r23, 0x0A	; 10
    1510:	97 9f       	mul	r25, r23
    1512:	90 2d       	mov	r25, r0
    1514:	87 9f       	mul	r24, r23
    1516:	80 2d       	mov	r24, r0
    1518:	91 0d       	add	r25, r1
    151a:	11 24       	eor	r1, r1
    151c:	08 95       	ret

0000151e <_exit>:
    151e:	f8 94       	cli

00001520 <__stop_program>:
    1520:	ff cf       	rjmp	.-2      	; 0x1520 <__stop_program>
